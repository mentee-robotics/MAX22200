
Test_MAX22200.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f90  08003f90  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003f90  08003f90  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f90  08003f90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08004010  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004010  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ad2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef7  00000000  00000000  00043b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00047a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00048d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002441f  00000000  00000000  00049e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001562d  00000000  00000000  0006e257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2d16  00000000  00000000  00083884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015659a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  001565ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003ecc 	.word	0x08003ecc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08003ecc 	.word	0x08003ecc

08000218 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	4618      	mov	r0, r3
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <_ZNSt12_Vector_baseI5MotorSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f876 	bl	800032c <_ZNSt12_Vector_baseI5MotorSaIS0_EE12_Vector_implC1Ev>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <_ZNSt6vectorI5MotorSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4618      	mov	r0, r3
 8000256:	f7ff ffeb 	bl	8000230 <_ZNSt12_Vector_baseI5MotorSaIS0_EEC1Ev>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <_ZN15MotorControllerC1Ev>:
 *  Created on: May 15, 2023
 *      Author: nir
 */

#include "Controller.h"
MotorController::MotorController() {
 8000264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000268:	b0a2      	sub	sp, #136	; 0x88
 800026a:	af06      	add	r7, sp, #24
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fd87 	bl	8000d84 <_ZN8MAX22200C1Ev>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3320      	adds	r3, #32
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ffe5 	bl	800024a <_ZNSt6vectorI5MotorSaIS0_EEC1Ev>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	332c      	adds	r3, #44	; 0x2c
 8000284:	2220      	movs	r2, #32
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fcd5 	bl	8003c38 <memset>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2201      	movs	r2, #1
 8000292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2201      	movs	r2, #1
 800029a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2201      	movs	r2, #1
 80002a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2201      	movs	r2, #1
 80002aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2201      	movs	r2, #1
 80002b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2201      	movs	r2, #1
 80002ba:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	max_.MAX22200_init(&statusReg);
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	332c      	adds	r3, #44	; 0x2c
 80002c4:	4619      	mov	r1, r3
 80002c6:	4610      	mov	r0, r2
 80002c8:	f000 fd68 	bl	8000d9c <_ZN8MAX2220013MAX22200_initEPK18MAX22200_StatusReg>
    for (uint8_t i = 1; i <= 4; i++) {
 80002cc:	2301      	movs	r3, #1
 80002ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80002d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	d822      	bhi.n	8000320 <_ZN15MotorControllerC1Ev+0xbc>
        motors.push_back(Motor(i,max_));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f103 0820 	add.w	r8, r3, #32
 80002e0:	687e      	ldr	r6, [r7, #4]
 80002e2:	f897 e06f 	ldrb.w	lr, [r7, #111]	; 0x6f
 80002e6:	f107 0c08 	add.w	ip, r7, #8
 80002ea:	466d      	mov	r5, sp
 80002ec:	f106 0408 	add.w	r4, r6, #8
 80002f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80002f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80002fc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000300:	4671      	mov	r1, lr
 8000302:	4660      	mov	r0, ip
 8000304:	f000 fe56 	bl	8000fb4 <_ZN5MotorC1Eh8MAX22200>
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	4619      	mov	r1, r3
 800030e:	4640      	mov	r0, r8
 8000310:	f000 f81c 	bl	800034c <_ZNSt6vectorI5MotorSaIS0_EE9push_backEOS0_>
    for (uint8_t i = 1; i <= 4; i++) {
 8000314:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000318:	3301      	adds	r3, #1
 800031a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800031e:	e7d8      	b.n	80002d2 <_ZN15MotorControllerC1Ev+0x6e>
    }

}
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4618      	mov	r0, r3
 8000324:	3770      	adds	r7, #112	; 0x70
 8000326:	46bd      	mov	sp, r7
 8000328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800032c <_ZNSt12_Vector_baseI5MotorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f850 	bl	80003da <_ZNSaI5MotorEC1Ev>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f858 	bl	80003f2 <_ZNSt12_Vector_baseI5MotorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <_ZNSt6vectorI5MotorSaIS0_EE9push_backEOS0_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000356:	6838      	ldr	r0, [r7, #0]
 8000358:	f000 f88b 	bl	8000472 <_ZSt4moveIR5MotorEONSt16remove_referenceIT_E4typeEOS3_>
 800035c:	4603      	mov	r3, r0
 800035e:	4619      	mov	r1, r3
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f891 	bl	8000488 <_ZNSt6vectorI5MotorSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <_ZNKSt6vectorI5MotorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685a      	ldr	r2, [r3, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	4a04      	ldr	r2, [pc, #16]	; (8000394 <_ZNKSt6vectorI5MotorSaIS0_EE4sizeEv+0x24>)
 8000384:	fb02 f303 	mul.w	r3, r2, r3
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	7c32b16d 	.word	0x7c32b16d

08000398 <_ZNSt6vectorI5MotorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	4611      	mov	r1, r2
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f89c 	bl	80004e6 <_ZN9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <_ZNSt6vectorI5MotorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	1d1a      	adds	r2, r3, #4
 80003c4:	f107 030c 	add.w	r3, r7, #12
 80003c8:	4611      	mov	r1, r2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f88b 	bl	80004e6 <_ZN9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	4618      	mov	r0, r3
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_ZNSaI5MotorEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80003da:	b580      	push	{r7, lr}
 80003dc:	b082      	sub	sp, #8
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 f89a 	bl	800051c <_ZN9__gnu_cxx13new_allocatorI5MotorEC1Ev>
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4618      	mov	r0, r3
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <_ZNSt12_Vector_baseI5MotorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
	{ }
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <_ZNSt12_Vector_baseI5MotorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
	if (__p)
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d005      	beq.n	8000438 <_ZNSt12_Vector_baseI5MotorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f87d 	bl	8000532 <_ZNSt16allocator_traitsISaI5MotorEE10deallocateERS1_PS0_j>
      }
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <_ZNSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <_ZSt8_DestroyIP5MotorS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000462:	68b9      	ldr	r1, [r7, #8]
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f000 f873 	bl	8000550 <_ZSt8_DestroyIP5MotorEvT_S2_>
    }
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <_ZSt4moveIR5MotorEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <_ZNSt6vectorI5MotorSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685a      	ldr	r2, [r3, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	429a      	cmp	r2, r3
 800049c:	d012      	beq.n	80004c4 <_ZNSt6vectorI5MotorSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800049e:	687c      	ldr	r4, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	685d      	ldr	r5, [r3, #4]
 80004a4:	6838      	ldr	r0, [r7, #0]
 80004a6:	f000 f860 	bl	800056a <_ZSt7forwardI5MotorEOT_RNSt16remove_referenceIS1_E4typeE>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	4620      	mov	r0, r4
 80004b2:	f000 f865 	bl	8000580 <_ZNSt16allocator_traitsISaI5MotorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	f103 0265 	add.w	r2, r3, #101	; 0x65
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80004c2:	e00c      	b.n	80004de <_ZNSt6vectorI5MotorSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff ff77 	bl	80003b8 <_ZNSt6vectorI5MotorSaIS0_EE3endEv>
 80004ca:	4604      	mov	r4, r0
 80004cc:	6838      	ldr	r0, [r7, #0]
 80004ce:	f000 f84c 	bl	800056a <_ZSt7forwardI5MotorEOT_RNSt16remove_referenceIS1_E4typeE>
 80004d2:	4603      	mov	r3, r0
 80004d4:	461a      	mov	r2, r3
 80004d6:	4621      	mov	r1, r4
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f87b 	bl	80005d4 <_ZNSt6vectorI5MotorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bdb0      	pop	{r4, r5, r7, pc}

080004e6 <_ZN9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <_ZNK9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <_ZN9__gnu_cxx13new_allocatorI5MotorEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <_ZNSt16allocator_traitsISaI5MotorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000532:	b580      	push	{r7, lr}
 8000534:	b084      	sub	sp, #16
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	68b9      	ldr	r1, [r7, #8]
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f000 f90a 	bl	800075c <_ZN9__gnu_cxx13new_allocatorI5MotorE10deallocateEPS1_j>
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <_ZSt8_DestroyIP5MotorEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800055a:	6839      	ldr	r1, [r7, #0]
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f90f 	bl	8000780 <_ZNSt12_Destroy_auxILb1EE9__destroyIP5MotorEEvT_S4_>
    }
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_ZSt7forwardI5MotorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <_ZNSt16allocator_traitsISaI5MotorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ffec 	bl	800056a <_ZSt7forwardI5MotorEOT_RNSt16remove_referenceIS1_E4typeE>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	68b9      	ldr	r1, [r7, #8]
 8000598:	68f8      	ldr	r0, [r7, #12]
 800059a:	f000 f8fc 	bl	8000796 <_ZN9__gnu_cxx13new_allocatorI5MotorE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_ZNSt6vectorI5MotorSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f805 	bl	80005bc <_ZNSt6vectorI5MotorSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80005b2:	4603      	mov	r3, r0
      }
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_ZNSt6vectorI5MotorSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80005c4:	2301      	movs	r3, #1
      }
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <_ZNSt6vectorI5MotorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80005e0:	4a5c      	ldr	r2, [pc, #368]	; (8000754 <_ZNSt6vectorI5MotorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x180>)
 80005e2:	2101      	movs	r1, #1
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f000 f8f0 	bl	80007ca <_ZNKSt6vectorI5MotorSaIS0_EE12_M_check_lenEjPKc>
 80005ea:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f7ff fecd 	bl	8000398 <_ZNSt6vectorI5MotorSaIS0_EE5beginEv>
 80005fe:	4603      	mov	r3, r0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	f107 0214 	add.w	r2, r7, #20
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f923 	bl	8000858 <_ZN9__gnu_cxxmiIP5MotorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8000612:	4603      	mov	r3, r0
 8000614:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f936 	bl	800088c <_ZNSt12_Vector_baseI5MotorSaIS0_EE11_M_allocateEj>
 8000620:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000626:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	2265      	movs	r2, #101	; 0x65
 800062c:	fb02 f303 	mul.w	r3, r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	18d5      	adds	r5, r2, r3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff98 	bl	800056a <_ZSt7forwardI5MotorEOT_RNSt16remove_referenceIS1_E4typeE>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4629      	mov	r1, r5
 8000640:	4620      	mov	r0, r4
 8000642:	f7ff ff9d 	bl	8000580 <_ZNSt16allocator_traitsISaI5MotorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800064a:	f7ff ffac 	bl	80005a6 <_ZNSt6vectorI5MotorSaIS0_EE15_S_use_relocateEv>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d027      	beq.n	80006a4 <_ZNSt6vectorI5MotorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff54 	bl	8000506 <_ZNK9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEE4baseEv>
 800065e:	4603      	mov	r3, r0
 8000660:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff feeb 	bl	8000440 <_ZNSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>
 800066a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	4621      	mov	r1, r4
 8000670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000672:	f000 f91f 	bl	80008b4 <_ZNSt6vectorI5MotorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8000676:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067a:	3365      	adds	r3, #101	; 0x65
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff3f 	bl	8000506 <_ZNK9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEE4baseEv>
 8000688:	4603      	mov	r3, r0
 800068a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fed6 	bl	8000440 <_ZNSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>
 8000694:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000698:	6a39      	ldr	r1, [r7, #32]
 800069a:	4620      	mov	r0, r4
 800069c:	f000 f90a 	bl	80008b4 <_ZNSt6vectorI5MotorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80006a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80006a2:	e026      	b.n	80006f2 <_ZNSt6vectorI5MotorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11e>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff2c 	bl	8000506 <_ZNK9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEE4baseEv>
 80006ae:	4603      	mov	r3, r0
 80006b0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fec3 	bl	8000440 <_ZNSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>
 80006ba:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	4621      	mov	r1, r4
 80006c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006c2:	f000 f90b 	bl	80008dc <_ZSt34__uninitialized_move_if_noexcept_aIP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_>
 80006c6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80006c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ca:	3365      	adds	r3, #101	; 0x65
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff17 	bl	8000506 <_ZNK9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEE4baseEv>
 80006d8:	4603      	mov	r3, r0
 80006da:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff feae 	bl	8000440 <_ZNSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>
 80006e4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80006e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006e8:	6a39      	ldr	r1, [r7, #32]
 80006ea:	4620      	mov	r0, r4
 80006ec:	f000 f8f6 	bl	80008dc <_ZSt34__uninitialized_move_if_noexcept_aIP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_>
 80006f0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80006f2:	f7ff ff58 	bl	80005a6 <_ZNSt6vectorI5MotorSaIS0_EE15_S_use_relocateEv>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f083 0301 	eor.w	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d009      	beq.n	8000716 <_ZNSt6vectorI5MotorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x142>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe9b 	bl	8000440 <_ZNSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	6a39      	ldr	r1, [r7, #32]
 8000710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000712:	f7ff fea0 	bl	8000456 <_ZSt8_DestroyIP5MotorS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000716:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	689a      	ldr	r2, [r3, #8]
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <_ZNSt6vectorI5MotorSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x184>)
 8000722:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8000726:	461a      	mov	r2, r3
 8000728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800072a:	f7ff fe76 	bl	800041a <_ZNSt12_Vector_baseI5MotorSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000738:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073c:	2265      	movs	r2, #101	; 0x65
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	441a      	add	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	609a      	str	r2, [r3, #8]
    }
 800074a:	bf00      	nop
 800074c:	3730      	adds	r7, #48	; 0x30
 800074e:	46bd      	mov	sp, r7
 8000750:	bdb0      	pop	{r4, r5, r7, pc}
 8000752:	bf00      	nop
 8000754:	08003ee4 	.word	0x08003ee4
 8000758:	7c32b16d 	.word	0x7c32b16d

0800075c <_ZN9__gnu_cxx13new_allocatorI5MotorE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2265      	movs	r2, #101	; 0x65
 800076c:	fb02 f303 	mul.w	r3, r2, r3
 8000770:	4619      	mov	r1, r3
 8000772:	68b8      	ldr	r0, [r7, #8]
 8000774:	f003 f9ec 	bl	8003b50 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <_ZNSt12_Destroy_auxILb1EE9__destroyIP5MotorEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <_ZN9__gnu_cxx13new_allocatorI5MotorE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000796:	b590      	push	{r4, r7, lr}
 8000798:	b085      	sub	sp, #20
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fee1 	bl	800056a <_ZSt7forwardI5MotorEOT_RNSt16remove_referenceIS1_E4typeE>
 80007a8:	4604      	mov	r4, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2065      	movs	r0, #101	; 0x65
 80007b0:	f7ff fd32 	bl	8000218 <_ZnwjPv>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4618      	mov	r0, r3
 80007b8:	4621      	mov	r1, r4
 80007ba:	2365      	movs	r3, #101	; 0x65
 80007bc:	461a      	mov	r2, r3
 80007be:	f003 fa2d 	bl	8003c1c <memcpy>
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd90      	pop	{r4, r7, pc}

080007ca <_ZNKSt6vectorI5MotorSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80007ca:	b590      	push	{r4, r7, lr}
 80007cc:	b087      	sub	sp, #28
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f000 f8a6 	bl	8000928 <_ZNKSt6vectorI5MotorSaIS0_EE8max_sizeEv>
 80007dc:	4604      	mov	r4, r0
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f7ff fdc6 	bl	8000370 <_ZNKSt6vectorI5MotorSaIS0_EE4sizeEv>
 80007e4:	4603      	mov	r3, r0
 80007e6:	1ae2      	subs	r2, r4, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	bf34      	ite	cc
 80007ee:	2301      	movcc	r3, #1
 80007f0:	2300      	movcs	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <_ZNKSt6vectorI5MotorSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f003 f9bf 	bl	8003b7c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff fdb6 	bl	8000370 <_ZNKSt6vectorI5MotorSaIS0_EE4sizeEv>
 8000804:	4604      	mov	r4, r0
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff fdb2 	bl	8000370 <_ZNKSt6vectorI5MotorSaIS0_EE4sizeEv>
 800080c:	4603      	mov	r3, r0
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	f107 0208 	add.w	r2, r7, #8
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f895 	bl	800094a <_ZSt3maxIjERKT_S2_S2_>
 8000820:	4603      	mov	r3, r0
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4423      	add	r3, r4
 8000826:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fda1 	bl	8000370 <_ZNKSt6vectorI5MotorSaIS0_EE4sizeEv>
 800082e:	4602      	mov	r2, r0
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4293      	cmp	r3, r2
 8000834:	d306      	bcc.n	8000844 <_ZNKSt6vectorI5MotorSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 f876 	bl	8000928 <_ZNKSt6vectorI5MotorSaIS0_EE8max_sizeEv>
 800083c:	4602      	mov	r2, r0
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4293      	cmp	r3, r2
 8000842:	d904      	bls.n	800084e <_ZNKSt6vectorI5MotorSaIS0_EE12_M_check_lenEjPKc+0x84>
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f000 f86f 	bl	8000928 <_ZNKSt6vectorI5MotorSaIS0_EE8max_sizeEv>
 800084a:	4603      	mov	r3, r0
 800084c:	e000      	b.n	8000850 <_ZNKSt6vectorI5MotorSaIS0_EE12_M_check_lenEjPKc+0x86>
 800084e:	697b      	ldr	r3, [r7, #20]
      }
 8000850:	4618      	mov	r0, r3
 8000852:	371c      	adds	r7, #28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}

08000858 <_ZN9__gnu_cxxmiIP5MotorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fe4f 	bl	8000506 <_ZNK9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEE4baseEv>
 8000868:	4603      	mov	r3, r0
 800086a:	681c      	ldr	r4, [r3, #0]
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f7ff fe4a 	bl	8000506 <_ZNK9__gnu_cxx17__normal_iteratorIP5MotorSt6vectorIS1_SaIS1_EEE4baseEv>
 8000872:	4603      	mov	r3, r0
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	1ae3      	subs	r3, r4, r3
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <_ZN9__gnu_cxxmiIP5MotorSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 800087a:	fb02 f303 	mul.w	r3, r2, r3
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	bf00      	nop
 8000888:	7c32b16d 	.word	0x7c32b16d

0800088c <_ZNSt12_Vector_baseI5MotorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d006      	beq.n	80008aa <_ZNSt12_Vector_baseI5MotorSaIS0_EE11_M_allocateEj+0x1e>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f866 	bl	8000972 <_ZNSt16allocator_traitsISaI5MotorEE8allocateERS1_j>
 80008a6:	4603      	mov	r3, r0
 80008a8:	e000      	b.n	80008ac <_ZNSt12_Vector_baseI5MotorSaIS0_EE11_M_allocateEj+0x20>
 80008aa:	2300      	movs	r3, #0
      }
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_ZNSt6vectorI5MotorSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80008c2:	f88d 4000 	strb.w	r4, [sp]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	68b9      	ldr	r1, [r7, #8]
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f000 f85f 	bl	8000990 <_ZNSt6vectorI5MotorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80008d2:	4603      	mov	r3, r0
      }
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}

080008dc <_ZSt34__uninitialized_move_if_noexcept_aIP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 f862 	bl	80009b4 <_ZSt32__make_move_if_noexcept_iteratorI5MotorSt13move_iteratorIPS0_EET0_PT_>
 80008f0:	4604      	mov	r4, r0
 80008f2:	68b8      	ldr	r0, [r7, #8]
 80008f4:	f000 f85e 	bl	80009b4 <_ZSt32__make_move_if_noexcept_iteratorI5MotorSt13move_iteratorIPS0_EET0_PT_>
 80008f8:	4601      	mov	r1, r0
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4620      	mov	r0, r4
 8000900:	f000 f867 	bl	80009d2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP5MotorES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8000904:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}

0800090e <_ZNSt16allocator_traitsISaI5MotorEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8000918:	6839      	ldr	r1, [r7, #0]
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f86a 	bl	80009f4 <_ZN9__gnu_cxx13new_allocatorI5MotorE7destroyIS1_EEvPT_>
	}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZNKSt6vectorI5MotorSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f886 	bl	8000a44 <_ZNKSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>
 8000938:	4603      	mov	r3, r0
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f866 	bl	8000a0c <_ZNSt6vectorI5MotorSaIS0_EE11_S_max_sizeERKS1_>
 8000940:	4603      	mov	r3, r0
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d201      	bcs.n	8000964 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	e000      	b.n	8000966 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000964:	687b      	ldr	r3, [r7, #4]
    }
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_ZNSt16allocator_traitsISaI5MotorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800097c:	2200      	movs	r2, #0
 800097e:	6839      	ldr	r1, [r7, #0]
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 f86a 	bl	8000a5a <_ZN9__gnu_cxx13new_allocatorI5MotorE8allocateEjPKv>
 8000986:	4603      	mov	r3, r0
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZNSt6vectorI5MotorSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f000 f878 	bl	8000a9a <_ZSt12__relocate_aIP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_>
 80009aa:	4603      	mov	r3, r0
      }
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_ZSt32__make_move_if_noexcept_iteratorI5MotorSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f886 	bl	8000ad4 <_ZNSt13move_iteratorIP5MotorEC1ES1_>
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP5MotorES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 f887 	bl	8000af8 <_ZSt18uninitialized_copyISt13move_iteratorIP5MotorES2_ET0_T_S5_S4_>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZN9__gnu_cxx13new_allocatorI5MotorE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <_ZNSt6vectorI5MotorSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <_ZNSt6vectorI5MotorSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8000a16:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f87f 	bl	8000b1c <_ZNSt16allocator_traitsISaI5MotorEE8max_sizeERKS1_>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000a22:	f107 0208 	add.w	r2, r7, #8
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f881 	bl	8000b34 <_ZSt3minIjERKT_S2_S2_>
 8000a32:	4603      	mov	r3, r0
 8000a34:	681b      	ldr	r3, [r3, #0]
      }
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	01446f86 	.word	0x01446f86

08000a44 <_ZNKSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_ZN9__gnu_cxx13new_allocatorI5MotorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f878 	bl	8000b5c <_ZNK9__gnu_cxx13new_allocatorI5MotorE11_M_max_sizeEv>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	4293      	cmp	r3, r2
 8000a72:	bf8c      	ite	hi
 8000a74:	2301      	movhi	r3, #1
 8000a76:	2300      	movls	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_ZN9__gnu_cxx13new_allocatorI5MotorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000a7e:	f003 f87a 	bl	8003b76 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2265      	movs	r2, #101	; 0x65
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 f862 	bl	8003b54 <_Znwj>
 8000a90:	4603      	mov	r3, r0
      }
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_ZSt12__relocate_aIP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8000a9a:	b5b0      	push	{r4, r5, r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f000 f865 	bl	8000b78 <_ZSt12__niter_baseIP5MotorET_S2_>
 8000aae:	4604      	mov	r4, r0
 8000ab0:	68b8      	ldr	r0, [r7, #8]
 8000ab2:	f000 f861 	bl	8000b78 <_ZSt12__niter_baseIP5MotorET_S2_>
 8000ab6:	4605      	mov	r5, r0
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f85d 	bl	8000b78 <_ZSt12__niter_baseIP5MotorET_S2_>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	4629      	mov	r1, r5
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f000 f862 	bl	8000b8e <_ZSt14__relocate_a_1IP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_>
 8000aca:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bdb0      	pop	{r4, r5, r7, pc}

08000ad4 <_ZNSt13move_iteratorIP5MotorEC1ES1_>:
      move_iterator(iterator_type __i)
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f87a 	bl	8000bda <_ZSt4moveIRP5MotorEONSt16remove_referenceIT_E4typeEOS4_>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_ZSt18uninitialized_copyISt13move_iteratorIP5MotorES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000b04:	2301      	movs	r3, #1
 8000b06:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f86f 	bl	8000bf0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5MotorES4_EET0_T_S7_S6_>
 8000b12:	4603      	mov	r3, r0
    }
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZNSt16allocator_traitsISaI5MotorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f892 	bl	8000c4e <_ZNK9__gnu_cxx13new_allocatorI5MotorE8max_sizeEv>
 8000b2a:	4603      	mov	r3, r0
      }
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d201      	bcs.n	8000b4e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	e000      	b.n	8000b50 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000b4e:	687b      	ldr	r3, [r7, #4]
    }
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_ZNK9__gnu_cxx13new_allocatorI5MotorE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <_ZNK9__gnu_cxx13new_allocatorI5MotorE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	01446f86 	.word	0x01446f86

08000b78 <_ZSt12__niter_baseIP5MotorET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_ZSt14__relocate_a_1IP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b087      	sub	sp, #28
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d013      	beq.n	8000bd0 <_ZSt14__relocate_a_1IP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f000 f85c 	bl	8000c66 <_ZSt11__addressofI5MotorEPT_RS1_>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f858 	bl	8000c66 <_ZSt11__addressofI5MotorEPT_RS1_>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f000 f85d 	bl	8000c7c <_ZSt19__relocate_object_aI5MotorS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3365      	adds	r3, #101	; 0x65
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3365      	adds	r3, #101	; 0x65
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	e7e7      	b.n	8000ba0 <_ZSt14__relocate_a_1IP5MotorS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8000bd0:	697b      	ldr	r3, [r7, #20]
    }
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd90      	pop	{r4, r7, pc}

08000bda <_ZSt4moveIRP5MotorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5MotorES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8000c00:	f107 0208 	add.w	r2, r7, #8
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f851 	bl	8000cb2 <_ZStneIP5MotorEbRKSt13move_iteratorIT_ES6_>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d016      	beq.n	8000c44 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5MotorES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f000 f825 	bl	8000c66 <_ZSt11__addressofI5MotorEPT_RS1_>
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f867 	bl	8000cf6 <_ZNKSt13move_iteratorIP5MotorEdeEv>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f000 f86e 	bl	8000d0e <_ZSt10_ConstructI5MotorJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f84c 	bl	8000cd4 <_ZNSt13move_iteratorIP5MotorEppEv>
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3365      	adds	r3, #101	; 0x65
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e7dd      	b.n	8000c00 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5MotorES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8000c44:	697b      	ldr	r3, [r7, #20]
	}
 8000c46:	4618      	mov	r0, r3
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}

08000c4e <_ZNK9__gnu_cxx13new_allocatorI5MotorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff80 	bl	8000b5c <_ZNK9__gnu_cxx13new_allocatorI5MotorE11_M_max_sizeEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_ZSt11__addressofI5MotorEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_ZSt19__relocate_object_aI5MotorS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	f7ff fbf2 	bl	8000472 <_ZSt4moveIR5MotorEONSt16remove_referenceIT_E4typeEOS3_>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	68f9      	ldr	r1, [r7, #12]
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fc73 	bl	8000580 <_ZNSt16allocator_traitsISaI5MotorEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8000c9a:	68b8      	ldr	r0, [r7, #8]
 8000c9c:	f7ff ffe3 	bl	8000c66 <_ZSt11__addressofI5MotorEPT_RS1_>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fe32 	bl	800090e <_ZNSt16allocator_traitsISaI5MotorEE7destroyIS0_EEvRS1_PT_>
    }
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZStneIP5MotorEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f83e 	bl	8000d40 <_ZSteqIP5MotorEbRKSt13move_iteratorIT_ES6_>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZNSt13move_iteratorIP5MotorEppEv>:
      operator++()
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f103 0265 	add.w	r2, r3, #101	; 0x65
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
	return *this;
 8000ce8:	687b      	ldr	r3, [r7, #4]
      }
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_ZNKSt13move_iteratorIP5MotorEdeEv>:
      operator*() const
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_ZSt10_ConstructI5MotorJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8000d0e:	b590      	push	{r4, r7, lr}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8000d18:	6838      	ldr	r0, [r7, #0]
 8000d1a:	f7ff fc26 	bl	800056a <_ZSt7forwardI5MotorEOT_RNSt16remove_referenceIS1_E4typeE>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2065      	movs	r0, #101	; 0x65
 8000d26:	f7ff fa77 	bl	8000218 <_ZnwjPv>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	4621      	mov	r1, r4
 8000d30:	2365      	movs	r3, #101	; 0x65
 8000d32:	461a      	mov	r2, r3
 8000d34:	f002 ff72 	bl	8003c1c <memcpy>
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd90      	pop	{r4, r7, pc}

08000d40 <_ZSteqIP5MotorEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f80e 	bl	8000d6c <_ZNKSt13move_iteratorIP5MotorE4baseEv>
 8000d50:	4604      	mov	r4, r0
 8000d52:	6838      	ldr	r0, [r7, #0]
 8000d54:	f000 f80a 	bl	8000d6c <_ZNKSt13move_iteratorIP5MotorE4baseEv>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <_ZNKSt13move_iteratorIP5MotorE4baseEv>:
      base() const
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_ZN8MAX22200C1Ev>:
#include <stdio.h>
#include "MAX22200_driver.h"



MAX22200::MAX22200(){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

}
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <_ZN8MAX2220013MAX22200_initEPK18MAX22200_StatusReg>:

void MAX22200::MAX22200_init(const MAX22200_StatusReg *statusReg)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	// Enable the device
	MAX22200_ENABLE_HIGH
 8000da6:	2201      	movs	r2, #1
 8000da8:	2101      	movs	r1, #1
 8000daa:	4814      	ldr	r0, [pc, #80]	; (8000dfc <_ZN8MAX2220013MAX22200_initEPK18MAX22200_StatusReg+0x60>)
 8000dac:	f001 f81e 	bl	8001dec <HAL_GPIO_WritePin>

	// Make sure Channels aren't triggered
	MAX22200_TRIGA_LOW
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f001 f817 	bl	8001dec <HAL_GPIO_WritePin>
	MAX22200_TRIGB_LOW
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <_ZN8MAX2220013MAX22200_initEPK18MAX22200_StatusReg+0x60>)
 8000dc4:	f001 f812 	bl	8001dec <HAL_GPIO_WritePin>

	MAX22200_CS_HIGH  // Make sure CS  pin is high
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f001 f80b 	bl	8001dec <HAL_GPIO_WritePin>
	MAX22200_CMD_LOW  // Make sure CMD pin is low
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	4808      	ldr	r0, [pc, #32]	; (8000dfc <_ZN8MAX2220013MAX22200_initEPK18MAX22200_StatusReg+0x60>)
 8000ddc:	f001 f806 	bl	8001dec <HAL_GPIO_WritePin>
	// Build the status register
	uint32_t statusRegister = buildStatusRegister(statusReg);
 8000de0:	6839      	ldr	r1, [r7, #0]
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f872 	bl	8000ecc <_ZN8MAX2220019buildStatusRegisterEPK18MAX22200_StatusReg>
 8000de8:	60f8      	str	r0, [r7, #12]

	// Send the register via SPI
	MAX22200_write_register(MAX22200_STATUS, statusRegister);
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	2100      	movs	r1, #0
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f806 	bl	8000e00 <_ZN8MAX2220023MAX22200_write_registerEhm>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	48000400 	.word	0x48000400

08000e00 <_ZN8MAX2220023MAX22200_write_registerEhm>:



uint8_t  MAX22200::MAX22200_write_register(uint8_t reg_adr, uint32_t data)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	72fb      	strb	r3, [r7, #11]
    // first we need to writ the Command byte to setup the SPI transfer
	MAX22200_tx[0] = ((reg_adr<<1) & 0x7e) | 0x80;                    // MSB = 1 -> write - LSB = 0 -> 32 bit register access
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	701a      	strb	r2, [r3, #0]

	MAX22200_CMD_HIGH
 8000e26:	2201      	movs	r2, #1
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	4826      	ldr	r0, [pc, #152]	; (8000ec4 <_ZN8MAX2220023MAX22200_write_registerEhm+0xc4>)
 8000e2c:	f000 ffde 	bl	8001dec <HAL_GPIO_WritePin>
	MAX22200_CS_LOW
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f000 ffd7 	bl	8001dec <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, MAX22200_tx, MAX22200_rx, 1, 2);  // SPI RW 1 bytes
 8000e3e:	68f9      	ldr	r1, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f103 0210 	add.w	r2, r3, #16
 8000e46:	2302      	movs	r3, #2
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <_ZN8MAX2220023MAX22200_write_registerEhm+0xc8>)
 8000e4e:	f001 ff9e 	bl	8002d8e <HAL_SPI_TransmitReceive>

	MAX22200_CS_HIGH
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5c:	f000 ffc6 	bl	8001dec <HAL_GPIO_WritePin>
	MAX22200_CMD_LOW
 8000e60:	2200      	movs	r2, #0
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <_ZN8MAX2220023MAX22200_write_registerEhm+0xc4>)
 8000e66:	f000 ffc1 	bl	8001dec <HAL_GPIO_WritePin>

	// now we write the actual data
	MAX22200_tx[3] = ( data >> 24 ) & 0xff;   // MS Byte
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0e1b      	lsrs	r3, r3, #24
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	70da      	strb	r2, [r3, #3]
	MAX22200_tx[2] = ( data >> 16 ) & 0xff;   //
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	709a      	strb	r2, [r3, #2]
	MAX22200_tx[1] = ( data >> 8  ) & 0xff;   //
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	705a      	strb	r2, [r3, #1]
	MAX22200_tx[0] = ( data       ) & 0xff;   // LS Byte
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	701a      	strb	r2, [r3, #0]

	MAX22200_CS_LOW
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f000 ffa7 	bl	8001dec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MAX22200_tx, 4, 2);                      // SPI W 4 bytes
 8000e9e:	68f9      	ldr	r1, [r7, #12]
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <_ZN8MAX2220023MAX22200_write_registerEhm+0xc8>)
 8000ea6:	f001 fe04 	bl	8002ab2 <HAL_SPI_Transmit>

	MAX22200_CS_HIGH
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f000 ff9a 	bl	8001dec <HAL_GPIO_WritePin>

	return MAX22200_rx[0];                                            // return the status byte
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	7c1b      	ldrb	r3, [r3, #16]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	200000d8 	.word	0x200000d8

08000ecc <_ZN8MAX2220019buildStatusRegisterEPK18MAX22200_StatusReg>:

}


// Function to build STATUS register
uint32_t MAX22200::buildStatusRegister(const MAX22200_StatusReg* status) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]

    result |= (*status->ONCH) << 24;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	061b      	lsls	r3, r3, #24
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
    result |= (status->M_OVT << 23) | (status->M_OCP << 22) | (status->M_OLF << 21) | (status->M_HHF << 20);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	7a1b      	ldrb	r3, [r3, #8]
 8000eec:	05da      	lsls	r2, r3, #23
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	7a5b      	ldrb	r3, [r3, #9]
 8000ef2:	059b      	lsls	r3, r3, #22
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	7a9b      	ldrb	r3, [r3, #10]
 8000efa:	055b      	lsls	r3, r3, #21
 8000efc:	431a      	orrs	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	7adb      	ldrb	r3, [r3, #11]
 8000f02:	051b      	lsls	r3, r3, #20
 8000f04:	4313      	orrs	r3, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
    result |= (status->M_DPM << 19) | (status->M_COMF << 18) | (status->M_UVM << 17) | (status->FREQM << 16);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	7b1b      	ldrb	r3, [r3, #12]
 8000f12:	04da      	lsls	r2, r3, #19
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	7b5b      	ldrb	r3, [r3, #13]
 8000f18:	049b      	lsls	r3, r3, #18
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	7b9b      	ldrb	r3, [r3, #14]
 8000f20:	045b      	lsls	r3, r3, #17
 8000f22:	431a      	orrs	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	7bdb      	ldrb	r3, [r3, #15]
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
    result |= (*status->CM76 << 14) | (*status->CM54 << 12) | (*status->CM32 << 10) | (*status->CM10 << 8);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	7c1b      	ldrb	r3, [r3, #16]
 8000f38:	039a      	lsls	r2, r3, #14
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	7c9b      	ldrb	r3, [r3, #18]
 8000f3e:	031b      	lsls	r3, r3, #12
 8000f40:	431a      	orrs	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	7d1b      	ldrb	r3, [r3, #20]
 8000f46:	029b      	lsls	r3, r3, #10
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	7d9b      	ldrb	r3, [r3, #22]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	4313      	orrs	r3, r2
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
    result |= (status->OVT << 7) | (status->OCP << 6) | (status->OLF << 5) | (status->HHF << 4);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	7e1b      	ldrb	r3, [r3, #24]
 8000f5e:	01da      	lsls	r2, r3, #7
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	7e5b      	ldrb	r3, [r3, #25]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	431a      	orrs	r2, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	7e9b      	ldrb	r3, [r3, #26]
 8000f6c:	015b      	lsls	r3, r3, #5
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	7edb      	ldrb	r3, [r3, #27]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4313      	orrs	r3, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
    result |= (status->DPM << 3) | (status->COMER << 2) | (status->UVM << 1) | status->ACTIVE;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	7f1b      	ldrb	r3, [r3, #28]
 8000f84:	00da      	lsls	r2, r3, #3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	7f5b      	ldrb	r3, [r3, #29]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	7f9b      	ldrb	r3, [r3, #30]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4313      	orrs	r3, r2
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	7fd2      	ldrb	r2, [r2, #31]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    return result;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_ZN5MotorC1Eh8MAX22200>:
 *  Created on: May 15, 2023
 *      Author: nir
 */
#include "Motor.h"

Motor::Motor(uint8_t motorNumber,MAX22200 max)
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	b5b0      	push	{r4, r5, r7, lr}
 8000fb8:	b094      	sub	sp, #80	; 0x50
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000fc2:	e880 000c 	stmia.w	r0, {r2, r3}
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	70fb      	strb	r3, [r7, #3]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3345      	adds	r3, #69	; 0x45
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fed8 	bl	8000d84 <_ZN8MAX22200C1Ev>
{
  max_=max;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f103 0445 	add.w	r4, r3, #69	; 0x45
 8000fda:	f107 0560 	add.w	r5, r7, #96	; 0x60
 8000fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe0:	6020      	str	r0, [r4, #0]
 8000fe2:	6061      	str	r1, [r4, #4]
 8000fe4:	60a2      	str	r2, [r4, #8]
 8000fe6:	60e3      	str	r3, [r4, #12]
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	6120      	str	r0, [r4, #16]
 8000fec:	6161      	str	r1, [r4, #20]
 8000fee:	61a2      	str	r2, [r4, #24]
 8000ff0:	61e3      	str	r3, [r4, #28]
  m=motorNumber;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	711a      	strb	r2, [r3, #4]
  channel1_ = (motorNumber - 1) * 2 + 1;
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	709a      	strb	r2, [r3, #2]
  channel2_ = (motorNumber - 1) * 2 + 2;
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	70da      	strb	r2, [r3, #3]
  CFG_CH_Register cfg1_ = {
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <_ZN5MotorC1Eh8MAX22200+0xd8>)
 8001016:	f107 0408 	add.w	r4, r7, #8
 800101a:	461d      	mov	r5, r3
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .SRC = 0,                              // Set to 0
      .OL_EN = 0,                            // Set to 0
      .DPM_EN = 0,                           // Set to 0
      .HHF_EN = 0                            // Set to 0
  };
  CFG_CH_Register cfg2_ = {
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <_ZN5MotorC1Eh8MAX22200+0xd8>)
 800102a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .OL_EN = 0,                            // Set to 0
      .DPM_EN = 0,                           // Set to 0
      .HHF_EN = 0                            // Set to 0
  };
  // Build and send configuration registers for channel 1
  uint32_t cfg1Data = buildCfgRegister(cfg1_);
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f824 	bl	8001090 <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register>
 8001048:	64f8      	str	r0, [r7, #76]	; 0x4c
  max_.MAX22200_write_register(channel1_, cfg1Data);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	789b      	ldrb	r3, [r3, #2]
 8001054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fed2 	bl	8000e00 <_ZN8MAX2220023MAX22200_write_registerEhm>

  // Build and send configuration registers for channel 2
  uint32_t cfg2Data = buildCfgRegister(cfg2_);
 800105c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f814 	bl	8001090 <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register>
 8001068:	64b8      	str	r0, [r7, #72]	; 0x48
  max_.MAX22200_write_register(channel2_, cfg2Data);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	78db      	ldrb	r3, [r3, #3]
 8001074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fec2 	bl	8000e00 <_ZN8MAX2220023MAX22200_write_registerEhm>
}
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001088:	b002      	add	sp, #8
 800108a:	4770      	bx	lr
 800108c:	08003f00 	.word	0x08003f00

08001090 <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register>:
        break;
    }
}

 // Helper function to build configuration register data
 uint32_t Motor::buildCfgRegister(const CFG_CH_Register& config) {
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
   uint32_t result = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]

   result |= (config.HFS << 31);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	07db      	lsls	r3, r3, #31
 80010a4:	461a      	mov	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
   for (int i = 0; i < 7; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	dc12      	bgt.n	80010dc <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register+0x4c>
     result |= (config.HOLD[i] << (24 - i));
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4413      	add	r3, r2
 80010bc:	3301      	adds	r3, #1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	f1c3 0318 	rsb	r3, r3, #24
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
   for (int i = 0; i < 7; i++) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	3301      	adds	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e7e9      	b.n	80010b0 <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register+0x20>
   }
   result |= (config.TRGnSPI << 23);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	7a1b      	ldrb	r3, [r3, #8]
 80010e0:	05db      	lsls	r3, r3, #23
 80010e2:	461a      	mov	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	617b      	str	r3, [r7, #20]
   for (int i = 0; i < 7; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b06      	cmp	r3, #6
 80010f2:	dc12      	bgt.n	800111a <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register+0x8a>
     result |= (config.HIT[i] << (16 - i));
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	3309      	adds	r3, #9
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f1c3 0310 	rsb	r3, r3, #16
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	461a      	mov	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	4313      	orrs	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
   for (int i = 0; i < 7; i++) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e7e9      	b.n	80010ee <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register+0x5e>
   }
   for (int i = 0; i < 8; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b07      	cmp	r3, #7
 8001122:	dc12      	bgt.n	800114a <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register+0xba>
     result |= (config.HIT_T[i] << (8 - i));
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	3310      	adds	r3, #16
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f1c3 0308 	rsb	r3, r3, #8
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	461a      	mov	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]
   for (int i = 0; i < 8; i++) {
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	e7e9      	b.n	800111e <_ZN5Motor16buildCfgRegisterERK15CFG_CH_Register+0x8e>
   }
   result |= (config.VDRnCDR << 7);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	7e1b      	ldrb	r3, [r3, #24]
 800114e:	01db      	lsls	r3, r3, #7
 8001150:	461a      	mov	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	4313      	orrs	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
   result |= (config.HSnLS << 6);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	7e5b      	ldrb	r3, [r3, #25]
 800115c:	019b      	lsls	r3, r3, #6
 800115e:	461a      	mov	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	4313      	orrs	r3, r2
 8001164:	617b      	str	r3, [r7, #20]
   result |= ((config.FREQ_CFG[0] & 0x3) << 4);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	7e9b      	ldrb	r3, [r3, #26]
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
   result |= (config.SRC << 3);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	7f1b      	ldrb	r3, [r3, #28]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	461a      	mov	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4313      	orrs	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
   result |= (config.OL_EN << 2);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	7f5b      	ldrb	r3, [r3, #29]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	461a      	mov	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4313      	orrs	r3, r2
 8001190:	617b      	str	r3, [r7, #20]
   result |= (config.DPM_EN << 1);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	7f9b      	ldrb	r3, [r3, #30]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	461a      	mov	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
   result |= config.HHF_EN;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	7fdb      	ldrb	r3, [r3, #31]
 80011a4:	461a      	mov	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]

   return result;
 80011ac:	697b      	ldr	r3, [r7, #20]
 }
 80011ae:	4618      	mov	r0, r3
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <loop_init>:
#include "Controller/Controller.h"
#include "Configuration.h"

MotorController control1;

extern "C" void loop_init() {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80011c0:	4807      	ldr	r0, [pc, #28]	; (80011e0 <loop_init+0x24>)
 80011c2:	f002 f9b3 	bl	800352c <HAL_TIM_Base_Start_IT>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <loop_init+0x1e>
	{
	  // Starting Error
	  Error_Handler();
 80011d6:	f000 f95e 	bl	8001496 <Error_Handler>
	}
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000140 	.word	0x20000140

080011e4 <loop>:

extern "C" void loop() {
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_ZN15MotorControllerD1Ev>:
#define CONTROLLER_CONTROLLER_H_

#include "Configuration.h"
#include "../Motor/Motor.h"

class MotorController
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3320      	adds	r3, #32
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f828 	bl	8001254 <_ZNSt6vectorI5MotorSaIS0_EED1Ev>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <_Z41__static_initialization_and_destruction_0ii>:
{
  if (htim->Instance == TIM2) // Check if the interrupt comes from TIM2
  {
	  control1.update();
  }
}
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d107      	bne.n	8001230 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001226:	4293      	cmp	r3, r2
 8001228:	d102      	bne.n	8001230 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorController control1;
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800122c:	f7ff f81a 	bl	8000264 <_ZN15MotorControllerC1Ev>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d107      	bne.n	8001246 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123c:	4293      	cmp	r3, r2
 800123e:	d102      	bne.n	8001246 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001242:	f7ff ffd6 	bl	80011f2 <_ZN15MotorControllerD1Ev>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000008c 	.word	0x2000008c

08001254 <_ZNSt6vectorI5MotorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681c      	ldr	r4, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8ea 	bl	8000440 <_ZNSt12_Vector_baseI5MotorSaIS0_EE19_M_get_Tp_allocatorEv>
 800126c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800126e:	461a      	mov	r2, r3
 8001270:	4629      	mov	r1, r5
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff f8ef 	bl	8000456 <_ZSt8_DestroyIP5MotorS0_EvT_S2_RSaIT0_E>
      }
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f812 	bl	80012a4 <_ZNSt12_Vector_baseI5MotorSaIS0_EED1Ev>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}

0800128a <_ZNSt12_Vector_baseI5MotorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f824 	bl	80012e0 <_ZNSaI5MotorED1Ev>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <_ZNSt12_Vector_baseI5MotorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <_ZNSt12_Vector_baseI5MotorSaIS0_EED1Ev+0x38>)
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80012c0:	461a      	mov	r2, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f8a9 	bl	800041a <_ZNSt12_Vector_baseI5MotorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffdd 	bl	800128a <_ZNSt12_Vector_baseI5MotorSaIS0_EE12_Vector_implD1Ev>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	7c32b16d 	.word	0x7c32b16d

080012e0 <_ZNSaI5MotorED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f805 	bl	80012f8 <_ZN9__gnu_cxx13new_allocatorI5MotorED1Ev>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_ZN9__gnu_cxx13new_allocatorI5MotorED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_GLOBAL__sub_I_control1>:
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
 8001312:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff ff7a 	bl	8001210 <_Z41__static_initialization_and_destruction_0ii>
 800131c:	bd80      	pop	{r7, pc}

0800131e <_GLOBAL__sub_D_control1>:
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
 8001322:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff ff72 	bl	8001210 <_Z41__static_initialization_and_destruction_0ii>
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_GPIO_Init+0xa4>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <MX_GPIO_Init+0xa4>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_GPIO_Init+0xa4>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_GPIO_Init+0xa4>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xa4>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_GPIO_Init+0xa4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRV_ENABLE_Pin|DRV_CMD_Pin|DRV_TRIGB_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	21c1      	movs	r1, #193	; 0xc1
 800137a:	4817      	ldr	r0, [pc, #92]	; (80013d8 <MX_GPIO_Init+0xa8>)
 800137c:	f000 fd36 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_DRV_Pin|DRV_TRIGA_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f000 fd2f 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin|DRV_CMD_Pin|DRV_TRIGB_Pin;
 800138e:	23c1      	movs	r3, #193	; 0xc1
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_GPIO_Init+0xa8>)
 80013a6:	f000 fb9f 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_DRV_Pin|DRV_TRIGA_Pin;
 80013aa:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f000 fb8f 	bl	8001ae8 <HAL_GPIO_Init>

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000400 	.word	0x48000400

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e0:	f000 fa2d 	bl	800183e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 f80b 	bl	80013fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f7ff ffa2 	bl	8001330 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013ec:	f000 f858 	bl	80014a0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80013f0:	f000 f990 	bl	8001714 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  loop_init();
 80013f4:	f7ff fee2 	bl	80011bc <loop_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  loop();
 80013f8:	f7ff fef4 	bl	80011e4 <loop>
 80013fc:	e7fc      	b.n	80013f8 <main+0x1c>

080013fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b094      	sub	sp, #80	; 0x50
 8001402:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2238      	movs	r2, #56	; 0x38
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fc13 	bl	8003c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001420:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001424:	f000 fcfa 	bl	8001e1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800143e:	2304      	movs	r3, #4
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001442:	234b      	movs	r3, #75	; 0x4b
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144e:	2302      	movs	r3, #2
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fd84 	bl	8001f64 <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001462:	f000 f818 	bl	8001496 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2303      	movs	r3, #3
 800146c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2104      	movs	r1, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f001 f888 	bl	8002594 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800148a:	f000 f804 	bl	8001496 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	; 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149a:	b672      	cpsid	i
}
 800149c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149e:	e7fe      	b.n	800149e <Error_Handler+0x8>

080014a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_SPI1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_SPI1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_SPI1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI1_Init+0x74>)
 80014d6:	2238      	movs	r2, #56	; 0x38
 80014d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ee:	2207      	movs	r2, #7
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI1_Init+0x74>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_SPI1_Init+0x74>)
 8001500:	f001 fa2c 	bl	800295c <HAL_SPI_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f7ff ffc4 	bl	8001496 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000d8 	.word	0x200000d8
 8001518:	40013000 	.word	0x40013000

0800151c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_SPI_MspInit+0x7c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d127      	bne.n	800158e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001548:	6613      	str	r3, [r2, #96]	; 0x60
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_SPI_MspInit+0x80>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_SPI_MspInit+0x80>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800156e:	2338      	movs	r3, #56	; 0x38
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157e:	2305      	movs	r3, #5
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_SPI_MspInit+0x84>)
 800158a:	f000 faad 	bl	8001ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40013000 	.word	0x40013000
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000400 	.word	0x48000400

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x44>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6613      	str	r3, [r2, #96]	; 0x60
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x44>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x44>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x44>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f954 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_kill>:

int _kill(int pid, int sig)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165a:	f002 faa5 	bl	8003ba8 <__errno>
 800165e:	4603      	mov	r3, r0
 8001660:	2216      	movs	r2, #22
 8001662:	601a      	str	r2, [r3, #0]
  return -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_exit>:

void _exit (int status)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ffe7 	bl	8001650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0x12>

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f002 fa78 	bl	8003ba8 <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20008000 	.word	0x20008000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	2000013c 	.word	0x2000013c
 80016ec:	200001a8 	.word	0x200001a8

080016f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_TIM2_Init+0x98>)
 8001734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001738:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 374;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_TIM2_Init+0x98>)
 800173c:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8001740:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_TIM2_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_TIM2_Init+0x98>)
 800174a:	2209      	movs	r2, #9
 800174c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_TIM2_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_TIM2_Init+0x98>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800175a:	4814      	ldr	r0, [pc, #80]	; (80017ac <MX_TIM2_Init+0x98>)
 800175c:	f001 fe8e 	bl	800347c <HAL_TIM_Base_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001766:	f7ff fe96 	bl	8001496 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_TIM2_Init+0x98>)
 8001778:	f001 ff42 	bl	8003600 <HAL_TIM_ConfigClockSource>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001782:	f7ff fe88 	bl	8001496 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_TIM2_Init+0x98>)
 8001794:	f002 f95a 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800179e:	f7ff fe7a 	bl	8001496 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000140 	.word	0x20000140

080017b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d10b      	bne.n	80017da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_TIM_Base_MspInit+0x38>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_TIM_Base_MspInit+0x38>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6593      	str	r3, [r2, #88]	; 0x58
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_TIM_Base_MspInit+0x38>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0b      	ldr	r4, [pc, #44]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001816:	f7ff ff6b 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f002 f9cb 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7ff fddd 	bl	80013dc <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   r0, =_estack
 8001824:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001830:	08003fa0 	.word	0x08003fa0
  ldr r2, =_sbss
 8001834:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001838:	200001a4 	.word	0x200001a4

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>

0800183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f91b 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	200f      	movs	r0, #15
 8001850:	f000 f80e 	bl	8001870 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fea0 	bl	80015a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]

}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_InitTick+0x68>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d022      	beq.n	80018ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_InitTick+0x6c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_InitTick+0x68>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001890:	fbb1 f3f3 	udiv	r3, r1, r3
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f918 	bl	8001ace <HAL_SYSTICK_Config>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10f      	bne.n	80018c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d809      	bhi.n	80018be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018aa:	2200      	movs	r2, #0
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b2:	f000 f8f2 	bl	8001a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_InitTick+0x70>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e007      	b.n	80018ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e004      	b.n	80018ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x1c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a03      	ldr	r2, [pc, #12]	; (8001900 <HAL_IncTick+0x1c>)
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	2000018c 	.word	0x2000018c
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000018c 	.word	0x2000018c

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff47 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff5e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffb2 	bl	8001a40 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001af6:	e15a      	b.n	8001dae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 814c 	beq.w	8001da8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d005      	beq.n	8001b28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d130      	bne.n	8001b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b5e:	2201      	movs	r2, #1
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f003 0201 	and.w	r2, r3, #1
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d017      	beq.n	8001bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d123      	bne.n	8001c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	6939      	ldr	r1, [r7, #16]
 8001c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0203 	and.w	r2, r3, #3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80a6 	beq.w	8001da8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c60:	4a5a      	ldr	r2, [pc, #360]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6613      	str	r3, [r2, #96]	; 0x60
 8001c68:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c74:	4a56      	ldr	r2, [pc, #344]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c9e:	d01f      	beq.n	8001ce0 <HAL_GPIO_Init+0x1f8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d019      	beq.n	8001cdc <HAL_GPIO_Init+0x1f4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a4b      	ldr	r2, [pc, #300]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <HAL_GPIO_Init+0x2f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x2f8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cc8:	2305      	movs	r3, #5
 8001cca:	e00a      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001ccc:	2306      	movs	r3, #6
 8001cce:	e008      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf2:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d24:	4a30      	ldr	r2, [pc, #192]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4e:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f47f ae9d 	bne.w	8001af8 <HAL_GPIO_Init+0x10>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000c00 	.word	0x48000c00
 8001de0:	48001000 	.word	0x48001000
 8001de4:	48001400 	.word	0x48001400
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d141      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e36:	d131      	bne.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e38:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e3e:	4a46      	ldr	r2, [pc, #280]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e48:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e50:	4a41      	ldr	r2, [pc, #260]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2232      	movs	r2, #50	; 0x32
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	4a3f      	ldr	r2, [pc, #252]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	0c9b      	lsrs	r3, r3, #18
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e6e:	e002      	b.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e82:	d102      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f2      	bne.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d158      	bne.n	8001f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e057      	b.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea2:	4a2d      	ldr	r2, [pc, #180]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001eac:	e04d      	b.n	8001f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb4:	d141      	bne.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d131      	bne.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001edc:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2232      	movs	r2, #50	; 0x32
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efa:	e002      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d102      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f2      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d112      	bne.n	8001f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e011      	b.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f38:	e007      	b.n	8001f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	431bde83 	.word	0x431bde83

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e306      	b.n	8002584 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d075      	beq.n	800206e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f82:	4b97      	ldr	r3, [pc, #604]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8c:	4b94      	ldr	r3, [pc, #592]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d102      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3e>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x44>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05b      	beq.n	800206c <HAL_RCC_OscConfig+0x108>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d157      	bne.n	800206c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e2e1      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x74>
 8001fca:	4b85      	ldr	r3, [pc, #532]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a84      	ldr	r2, [pc, #528]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b7c      	ldr	r3, [pc, #496]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7b      	ldr	r2, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001ffc:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a74      	ldr	r2, [pc, #464]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fc74 	bl	8001908 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fc70 	bl	8001908 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e2a6      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xc0>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fc60 	bl	8001908 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fc5c 	bl	8001908 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e292      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800205e:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0xe8>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d075      	beq.n	8002166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207a:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002084:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d102      	bne.n	800209a <HAL_RCC_OscConfig+0x136>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_OscConfig+0x13c>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d11f      	bne.n	80020e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a0:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_OscConfig+0x154>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e265      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	4946      	ldr	r1, [pc, #280]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020cc:	4b45      	ldr	r3, [pc, #276]	; (80021e4 <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fbcd 	bl	8001870 <HAL_InitTick>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d043      	beq.n	8002164 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e251      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d023      	beq.n	8002130 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3c      	ldr	r2, [pc, #240]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fc08 	bl	8001908 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff fc04 	bl	8001908 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e23a      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210e:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	492d      	ldr	r1, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
 800212e:	e01a      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fbe4 	bl	8001908 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff fbe0 	bl	8001908 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e216      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1e0>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d041      	beq.n	80021f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 800217c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7ff fbbd 	bl	8001908 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002192:	f7ff fbb9 	bl	8001908 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1ef      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ef      	beq.n	8002192 <HAL_RCC_OscConfig+0x22e>
 80021b2:	e020      	b.n	80021f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RCC_OscConfig+0x27c>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7ff fba0 	bl	8001908 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ca:	e00d      	b.n	80021e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff fb9c 	bl	8001908 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d906      	bls.n	80021e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1d2      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e8:	4b8c      	ldr	r3, [pc, #560]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ea      	bne.n	80021cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80a6 	beq.w	8002350 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002208:	4b84      	ldr	r3, [pc, #528]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_OscConfig+0x2b4>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x2b6>
 8002218:	2300      	movs	r3, #0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00d      	beq.n	800223a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b7f      	ldr	r3, [pc, #508]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	4a7e      	ldr	r2, [pc, #504]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6593      	str	r3, [r2, #88]	; 0x58
 800222a:	4b7c      	ldr	r3, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	4b79      	ldr	r3, [pc, #484]	; (8002420 <HAL_RCC_OscConfig+0x4bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x4bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4bc>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7ff fb59 	bl	8001908 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7ff fb55 	bl	8001908 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e18b      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226c:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x4bc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d108      	bne.n	8002292 <HAL_RCC_OscConfig+0x32e>
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	4a65      	ldr	r2, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002290:	e024      	b.n	80022dc <HAL_RCC_OscConfig+0x378>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d110      	bne.n	80022bc <HAL_RCC_OscConfig+0x358>
 800229a:	4b60      	ldr	r3, [pc, #384]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	4a5a      	ldr	r2, [pc, #360]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ba:	e00f      	b.n	80022dc <HAL_RCC_OscConfig+0x378>
 80022bc:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	4a56      	ldr	r2, [pc, #344]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d016      	beq.n	8002312 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7ff fb10 	bl	8001908 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7ff fb0c 	bl	8001908 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e140      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ed      	beq.n	80022ec <HAL_RCC_OscConfig+0x388>
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7ff faf9 	bl	8001908 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7ff faf5 	bl	8001908 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e129      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002330:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ed      	bne.n	800231a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a34      	ldr	r2, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d03c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01c      	beq.n	800239e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002364:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236a:	4a2c      	ldr	r2, [pc, #176]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff fac8 	bl	8001908 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800237c:	f7ff fac4 	bl	8001908 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0fa      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 8002390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ef      	beq.n	800237c <HAL_RCC_OscConfig+0x418>
 800239c:	e01b      	b.n	80023d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ae:	f7ff faab 	bl	8001908 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b6:	f7ff faa7 	bl	8001908 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0dd      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ef      	bne.n	80023b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80d1 	beq.w	8002582 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	f000 808b 	beq.w	8002504 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d15e      	bne.n	80024b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7ff fa81 	bl	8001908 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002408:	e00c      	b.n	8002424 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7ff fa7d 	bl	8001908 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d905      	bls.n	8002424 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0b3      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCC_OscConfig+0x628>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ec      	bne.n	800240a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002430:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_RCC_OscConfig+0x628>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_OscConfig+0x62c>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6a11      	ldr	r1, [r2, #32]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002440:	3a01      	subs	r2, #1
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800244a:	0212      	lsls	r2, r2, #8
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002452:	0852      	lsrs	r2, r2, #1
 8002454:	3a01      	subs	r2, #1
 8002456:	0552      	lsls	r2, r2, #21
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0652      	lsls	r2, r2, #25
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800246a:	06d2      	lsls	r2, r2, #27
 800246c:	430a      	orrs	r2, r1
 800246e:	4947      	ldr	r1, [pc, #284]	; (800258c <HAL_RCC_OscConfig+0x628>)
 8002470:	4313      	orrs	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b45      	ldr	r3, [pc, #276]	; (800258c <HAL_RCC_OscConfig+0x628>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a44      	ldr	r2, [pc, #272]	; (800258c <HAL_RCC_OscConfig+0x628>)
 800247a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <HAL_RCC_OscConfig+0x628>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a41      	ldr	r2, [pc, #260]	; (800258c <HAL_RCC_OscConfig+0x628>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff fa3c 	bl	8001908 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff fa38 	bl	8001908 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e06e      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a6:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x530>
 80024b2:	e066      	b.n	8002582 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a34      	ldr	r2, [pc, #208]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024c0:	4b32      	ldr	r3, [pc, #200]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a31      	ldr	r2, [pc, #196]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a2e      	ldr	r2, [pc, #184]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fa14 	bl	8001908 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7ff fa10 	bl	8001908 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e046      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_RCC_OscConfig+0x628>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x580>
 8002502:	e03e      	b.n	8002582 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e039      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_OscConfig+0x628>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d12c      	bne.n	800257e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d123      	bne.n	800257e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d11b      	bne.n	800257e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d113      	bne.n	800257e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d109      	bne.n	800257e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	019f800c 	.word	0x019f800c

08002594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e11e      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b8e      	ldr	r3, [pc, #568]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 020f 	bic.w	r2, r3, #15
 80025c2:	498c      	ldr	r1, [pc, #560]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b8a      	ldr	r3, [pc, #552]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e106      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d073      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d129      	bne.n	8002644 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f0:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0f4      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002600:	f000 f966 	bl	80028d0 <RCC_GetSysClockFreqFromPLLSource>
 8002604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4a7c      	ldr	r2, [pc, #496]	; (80027fc <HAL_RCC_ClockConfig+0x268>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d93f      	bls.n	800268e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800260e:	4b7a      	ldr	r3, [pc, #488]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d033      	beq.n	800268e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d12f      	bne.n	800268e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800262e:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002636:	4a70      	ldr	r2, [pc, #448]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e024      	b.n	800268e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0c6      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0be      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800266c:	f000 f8ce 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8002670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4a61      	ldr	r2, [pc, #388]	; (80027fc <HAL_RCC_ClockConfig+0x268>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d909      	bls.n	800268e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800267a:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002682:	4a5d      	ldr	r2, [pc, #372]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4957      	ldr	r1, [pc, #348]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a0:	f7ff f932 	bl	8001908 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7ff f92e 	bl	8001908 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e095      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b4e      	ldr	r3, [pc, #312]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d023      	beq.n	8002724 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e8:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80026ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002708:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
 8002722:	e008      	b.n	8002736 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b80      	cmp	r3, #128	; 0x80
 8002728:	d105      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4a32      	ldr	r2, [pc, #200]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002734:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d21d      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 020f 	bic.w	r2, r3, #15
 800274c:	4929      	ldr	r1, [pc, #164]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002754:	f7ff f8d8 	bl	8001908 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7ff f8d4 	bl	8001908 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e03b      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d1ed      	bne.n	800275c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4917      	ldr	r1, [pc, #92]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490f      	ldr	r1, [pc, #60]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027be:	f000 f825 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490c      	ldr	r1, [pc, #48]	; (8002800 <HAL_RCC_ClockConfig+0x26c>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x270>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f844 	bl	8001870 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	04c4b400 	.word	0x04c4b400
 8002800:	08003f20 	.word	0x08003f20
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b04      	cmp	r3, #4
 800281c:	d102      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	e047      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d102      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e03e      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d136      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3301      	adds	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d10c      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286a:	68d2      	ldr	r2, [r2, #12]
 800286c:	0a12      	lsrs	r2, r2, #8
 800286e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
      break;
 8002878:	e00c      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	0a12      	lsrs	r2, r2, #8
 8002888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
      break;
 8002892:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0e5b      	lsrs	r3, r3, #25
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	e001      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028b4:	693b      	ldr	r3, [r7, #16]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	007a1200 	.word	0x007a1200

080028d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d10c      	bne.n	800290e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	0a12      	lsrs	r2, r2, #8
 8002902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
    break;
 800290c:	e00c      	b.n	8002928 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	0a12      	lsrs	r2, r2, #8
 800291c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    break;
 8002926:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0e5b      	lsrs	r3, r3, #25
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002942:	687b      	ldr	r3, [r7, #4]
}
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40021000 	.word	0x40021000
 8002954:	007a1200 	.word	0x007a1200
 8002958:	00f42400 	.word	0x00f42400

0800295c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e09d      	b.n	8002aaa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297e:	d009      	beq.n	8002994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
 8002986:	e005      	b.n	8002994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fdb4 	bl	800151c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d4:	d902      	bls.n	80029dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e002      	b.n	80029e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029ea:	d007      	beq.n	80029fc <HAL_SPI_Init+0xa0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029f4:	d002      	beq.n	80029fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	ea42 0103 	orr.w	r1, r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	f003 0204 	and.w	r2, r3, #4
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a78:	ea42 0103 	orr.w	r1, r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b088      	sub	sp, #32
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_SPI_Transmit+0x22>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e158      	b.n	8002d86 <HAL_SPI_Transmit+0x2d4>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002adc:	f7fe ff14 	bl	8001908 <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d002      	beq.n	8002af8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002af6:	e13d      	b.n	8002d74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_Transmit+0x52>
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b08:	e134      	b.n	8002d74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b54:	d10f      	bne.n	8002b76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d007      	beq.n	8002b94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b9c:	d94b      	bls.n	8002c36 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_SPI_Transmit+0xfa>
 8002ba6:	8afb      	ldrh	r3, [r7, #22]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d13e      	bne.n	8002c2a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bd0:	e02b      	b.n	8002c2a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d112      	bne.n	8002c06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	1c9a      	adds	r2, r3, #2
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c04:	e011      	b.n	8002c2a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c06:	f7fe fe7f 	bl	8001908 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d803      	bhi.n	8002c1e <HAL_SPI_Transmit+0x16c>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c1c:	d102      	bne.n	8002c24 <HAL_SPI_Transmit+0x172>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c28:	e0a4      	b.n	8002d74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ce      	bne.n	8002bd2 <HAL_SPI_Transmit+0x120>
 8002c34:	e07c      	b.n	8002d30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Transmit+0x192>
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d170      	bne.n	8002d26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d912      	bls.n	8002c74 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	1c9a      	adds	r2, r3, #2
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b02      	subs	r3, #2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c72:	e058      	b.n	8002d26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	7812      	ldrb	r2, [r2, #0]
 8002c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c9a:	e044      	b.n	8002d26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d12b      	bne.n	8002d02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d912      	bls.n	8002cda <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b02      	subs	r3, #2
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cd8:	e025      	b.n	8002d26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d00:	e011      	b.n	8002d26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d02:	f7fe fe01 	bl	8001908 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d803      	bhi.n	8002d1a <HAL_SPI_Transmit+0x268>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d18:	d102      	bne.n	8002d20 <HAL_SPI_Transmit+0x26e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d24:	e026      	b.n	8002d74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1b5      	bne.n	8002c9c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fb5b 	bl	80033f0 <SPI_EndRxTxTransaction>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e000      	b.n	8002d74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08a      	sub	sp, #40	; 0x28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x26>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e1fb      	b.n	80031ac <HAL_SPI_TransmitReceive+0x41e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dbc:	f7fe fda4 	bl	8001908 <HAL_GetTick>
 8002dc0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dc8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dd8:	7efb      	ldrb	r3, [r7, #27]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d00e      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x6e>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de4:	d106      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x66>
 8002dee:	7efb      	ldrb	r3, [r7, #27]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d003      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dfa:	e1cd      	b.n	8003198 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x80>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x80>
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e14:	e1c0      	b.n	8003198 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d003      	beq.n	8002e2a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2205      	movs	r2, #5
 8002e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	887a      	ldrh	r2, [r7, #2]
 8002e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	887a      	ldrh	r2, [r7, #2]
 8002e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	887a      	ldrh	r2, [r7, #2]
 8002e56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e6c:	d802      	bhi.n	8002e74 <HAL_SPI_TransmitReceive+0xe6>
 8002e6e:	8a3b      	ldrh	r3, [r7, #16]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d908      	bls.n	8002e86 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	e007      	b.n	8002e96 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d007      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ebc:	d97c      	bls.n	8002fb8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0x13e>
 8002ec6:	8a7b      	ldrh	r3, [r7, #18]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d169      	bne.n	8002fa0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	881a      	ldrh	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	1c9a      	adds	r2, r3, #2
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef0:	e056      	b.n	8002fa0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d11b      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x1aa>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x1aa>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d113      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	881a      	ldrh	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	1c9a      	adds	r2, r3, #2
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d11c      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x1f2>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f80:	f7fe fcc2 	bl	8001908 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d807      	bhi.n	8002fa0 <HAL_SPI_TransmitReceive+0x212>
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f96:	d003      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f9e:	e0fb      	b.n	8003198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1a3      	bne.n	8002ef2 <HAL_SPI_TransmitReceive+0x164>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d19d      	bne.n	8002ef2 <HAL_SPI_TransmitReceive+0x164>
 8002fb6:	e0df      	b.n	8003178 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x23a>
 8002fc0:	8a7b      	ldrh	r3, [r7, #18]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 80cb 	bne.w	800315e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d912      	bls.n	8002ff8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b02      	subs	r3, #2
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ff6:	e0b2      	b.n	800315e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301e:	e09e      	b.n	800315e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d134      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x30a>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02f      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x30a>
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2b01      	cmp	r3, #1
 800303c:	d12c      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d912      	bls.n	800306e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	1c9a      	adds	r2, r3, #2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b02      	subs	r3, #2
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800306c:	e012      	b.n	8003094 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	7812      	ldrb	r2, [r2, #0]
 800307a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d148      	bne.n	8003138 <HAL_SPI_TransmitReceive+0x3aa>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d042      	beq.n	8003138 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d923      	bls.n	8003106 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	b292      	uxth	r2, r2
 80030ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	1c9a      	adds	r2, r3, #2
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b02      	subs	r3, #2
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d81f      	bhi.n	8003134 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	e016      	b.n	8003134 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f103 020c 	add.w	r2, r3, #12
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003134:	2301      	movs	r3, #1
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003138:	f7fe fbe6 	bl	8001908 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003144:	429a      	cmp	r2, r3
 8003146:	d803      	bhi.n	8003150 <HAL_SPI_TransmitReceive+0x3c2>
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314e:	d102      	bne.n	8003156 <HAL_SPI_TransmitReceive+0x3c8>
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800315c:	e01c      	b.n	8003198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af5b 	bne.w	8003020 <HAL_SPI_TransmitReceive+0x292>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	f47f af54 	bne.w	8003020 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f937 	bl	80033f0 <SPI_EndRxTxTransaction>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d006      	beq.n	8003196 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	661a      	str	r2, [r3, #96]	; 0x60
 8003194:	e000      	b.n	8003198 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031c4:	f7fe fba0 	bl	8001908 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031d4:	f7fe fb98 	bl	8001908 <HAL_GetTick>
 80031d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	015b      	lsls	r3, r3, #5
 80031e0:	0d1b      	lsrs	r3, r3, #20
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ea:	e054      	b.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f2:	d050      	beq.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031f4:	f7fe fb88 	bl	8001908 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	429a      	cmp	r2, r3
 8003202:	d902      	bls.n	800320a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d13d      	bne.n	8003286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003222:	d111      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322c:	d004      	beq.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d107      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d10f      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e017      	b.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3b01      	subs	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d19b      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032d6:	f7fe fb17 	bl	8001908 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032e6:	f7fe fb0f 	bl	8001908 <HAL_GetTick>
 80032ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00da      	lsls	r2, r3, #3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	0d1b      	lsrs	r3, r3, #20
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800330c:	e060      	b.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003314:	d107      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003324:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332c:	d050      	beq.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332e:	f7fe faeb 	bl	8001908 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	429a      	cmp	r2, r3
 800333c:	d902      	bls.n	8003344 <SPI_WaitFifoStateUntilTimeout+0x80>
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d13d      	bne.n	80033c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335c:	d111      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003366:	d004      	beq.n	8003372 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003370:	d107      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d10f      	bne.n	80033ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e010      	b.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d196      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000000 	.word	0x20000000

080033f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff ff5b 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e027      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff fec0 	bl	80031b4 <SPI_WaitFlagStateUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e014      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff34 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e000      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e049      	b.n	8003522 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe f984 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f000 f99a 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d001      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e04a      	b.n	80035da <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x6c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d013      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x6c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x6c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x6c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x6c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d115      	bne.n	80035c4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_TIM_Base_Start_IT+0xd0>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d015      	beq.n	80035d6 <HAL_TIM_Base_Start_IT+0xaa>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d011      	beq.n	80035d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c2:	e008      	b.n	80035d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e000      	b.n	80035d8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	00010007 	.word	0x00010007

08003600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIM_ConfigClockSource+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e0de      	b.n	80037da <HAL_TIM_ConfigClockSource+0x1da>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800363a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800363e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a63      	ldr	r2, [pc, #396]	; (80037e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	f000 80a9 	beq.w	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 800365c:	4a61      	ldr	r2, [pc, #388]	; (80037e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	f200 80ae 	bhi.w	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003664:	4a60      	ldr	r2, [pc, #384]	; (80037e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	f000 80a1 	beq.w	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 800366c:	4a5e      	ldr	r2, [pc, #376]	; (80037e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f200 80a6 	bhi.w	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003674:	4a5d      	ldr	r2, [pc, #372]	; (80037ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f000 8099 	beq.w	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 800367c:	4a5b      	ldr	r2, [pc, #364]	; (80037ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800367e:	4293      	cmp	r3, r2
 8003680:	f200 809e 	bhi.w	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003684:	4a5a      	ldr	r2, [pc, #360]	; (80037f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	f000 8091 	beq.w	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f200 8096 	bhi.w	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003694:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003698:	f000 8089 	beq.w	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 800369c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036a0:	f200 808e 	bhi.w	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a8:	d03e      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0x128>
 80036aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ae:	f200 8087 	bhi.w	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b6:	f000 8086 	beq.w	80037c6 <HAL_TIM_ConfigClockSource+0x1c6>
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036be:	d87f      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036c0:	2b70      	cmp	r3, #112	; 0x70
 80036c2:	d01a      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xfa>
 80036c4:	2b70      	cmp	r3, #112	; 0x70
 80036c6:	d87b      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036c8:	2b60      	cmp	r3, #96	; 0x60
 80036ca:	d050      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x16e>
 80036cc:	2b60      	cmp	r3, #96	; 0x60
 80036ce:	d877      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036d0:	2b50      	cmp	r3, #80	; 0x50
 80036d2:	d03c      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x14e>
 80036d4:	2b50      	cmp	r3, #80	; 0x50
 80036d6:	d873      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d058      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x18e>
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d86f      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036e0:	2b30      	cmp	r3, #48	; 0x30
 80036e2:	d064      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 80036e4:	2b30      	cmp	r3, #48	; 0x30
 80036e6:	d86b      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d060      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d867      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05c      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d05a      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x1ae>
 80036f8:	e062      	b.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f000 f97f 	bl	8003a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800371c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	609a      	str	r2, [r3, #8]
      break;
 8003726:	e04f      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f000 f968 	bl	8003a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374a:	609a      	str	r2, [r3, #8]
      break;
 800374c:	e03c      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	461a      	mov	r2, r3
 800375c:	f000 f8da 	bl	8003914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2150      	movs	r1, #80	; 0x50
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f933 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800376c:	e02c      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 f8f9 	bl	8003972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2160      	movs	r1, #96	; 0x60
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f923 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800378c:	e01c      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 f8ba 	bl	8003914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f913 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e00c      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f000 f90a 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80037be:	e003      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e000      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80037c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	00100070 	.word	0x00100070
 80037e8:	00100040 	.word	0x00100040
 80037ec:	00100030 	.word	0x00100030
 80037f0:	00100020 	.word	0x00100020

080037f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <TIM_Base_SetConfig+0x104>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00f      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d00b      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a39      	ldr	r2, [pc, #228]	; (80038fc <TIM_Base_SetConfig+0x108>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a38      	ldr	r2, [pc, #224]	; (8003900 <TIM_Base_SetConfig+0x10c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a37      	ldr	r2, [pc, #220]	; (8003904 <TIM_Base_SetConfig+0x110>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d108      	bne.n	800383e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <TIM_Base_SetConfig+0x104>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01b      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d017      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <TIM_Base_SetConfig+0x108>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a29      	ldr	r2, [pc, #164]	; (8003900 <TIM_Base_SetConfig+0x10c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00f      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a28      	ldr	r2, [pc, #160]	; (8003904 <TIM_Base_SetConfig+0x110>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00b      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a27      	ldr	r2, [pc, #156]	; (8003908 <TIM_Base_SetConfig+0x114>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d007      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a26      	ldr	r2, [pc, #152]	; (800390c <TIM_Base_SetConfig+0x118>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <TIM_Base_SetConfig+0x11c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <TIM_Base_SetConfig+0x104>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00f      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a11      	ldr	r2, [pc, #68]	; (8003904 <TIM_Base_SetConfig+0x110>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <TIM_Base_SetConfig+0x114>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0f      	ldr	r2, [pc, #60]	; (800390c <TIM_Base_SetConfig+0x118>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <TIM_Base_SetConfig+0x11c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d103      	bne.n	80038e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	615a      	str	r2, [r3, #20]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40013400 	.word	0x40013400
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800

08003914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0201 	bic.w	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 030a 	bic.w	r3, r3, #10
 8003950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003972:	b480      	push	{r7}
 8003974:	b087      	sub	sp, #28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800399c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f043 0307 	orr.w	r3, r3, #7
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e065      	b.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d013      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10c      	bne.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40013400 	.word	0x40013400
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40014000 	.word	0x40014000

08003b50 <_ZdlPvj>:
 8003b50:	f000 b817 	b.w	8003b82 <_ZdlPv>

08003b54 <_Znwj>:
 8003b54:	2801      	cmp	r0, #1
 8003b56:	bf38      	it	cc
 8003b58:	2001      	movcc	r0, #1
 8003b5a:	b510      	push	{r4, lr}
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f000 f84c 	bl	8003bfc <malloc>
 8003b64:	b930      	cbnz	r0, 8003b74 <_Znwj+0x20>
 8003b66:	f000 f80f 	bl	8003b88 <_ZSt15get_new_handlerv>
 8003b6a:	b908      	cbnz	r0, 8003b70 <_Znwj+0x1c>
 8003b6c:	f000 f814 	bl	8003b98 <abort>
 8003b70:	4780      	blx	r0
 8003b72:	e7f4      	b.n	8003b5e <_Znwj+0xa>
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <_ZSt17__throw_bad_allocv>:
 8003b76:	b508      	push	{r3, lr}
 8003b78:	f000 f80e 	bl	8003b98 <abort>

08003b7c <_ZSt20__throw_length_errorPKc>:
 8003b7c:	b508      	push	{r3, lr}
 8003b7e:	f000 f80b 	bl	8003b98 <abort>

08003b82 <_ZdlPv>:
 8003b82:	f000 b843 	b.w	8003c0c <free>
	...

08003b88 <_ZSt15get_new_handlerv>:
 8003b88:	4b02      	ldr	r3, [pc, #8]	; (8003b94 <_ZSt15get_new_handlerv+0xc>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	f3bf 8f5b 	dmb	ish
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000190 	.word	0x20000190

08003b98 <abort>:
 8003b98:	b508      	push	{r3, lr}
 8003b9a:	2006      	movs	r0, #6
 8003b9c:	f000 f96c 	bl	8003e78 <raise>
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	f7fd fd65 	bl	8001670 <_exit>
	...

08003ba8 <__errno>:
 8003ba8:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <__errno+0x8>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	2000000c 	.word	0x2000000c

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4d0d      	ldr	r5, [pc, #52]	; (8003bec <__libc_init_array+0x38>)
 8003bb8:	4c0d      	ldr	r4, [pc, #52]	; (8003bf0 <__libc_init_array+0x3c>)
 8003bba:	1b64      	subs	r4, r4, r5
 8003bbc:	10a4      	asrs	r4, r4, #2
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	42a6      	cmp	r6, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	4d0b      	ldr	r5, [pc, #44]	; (8003bf4 <__libc_init_array+0x40>)
 8003bc6:	4c0c      	ldr	r4, [pc, #48]	; (8003bf8 <__libc_init_array+0x44>)
 8003bc8:	f000 f980 	bl	8003ecc <_init>
 8003bcc:	1b64      	subs	r4, r4, r5
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	42a6      	cmp	r6, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bdc:	4798      	blx	r3
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be6:	4798      	blx	r3
 8003be8:	3601      	adds	r6, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	08003f90 	.word	0x08003f90
 8003bf0:	08003f90 	.word	0x08003f90
 8003bf4:	08003f90 	.word	0x08003f90
 8003bf8:	08003f98 	.word	0x08003f98

08003bfc <malloc>:
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <malloc+0xc>)
 8003bfe:	4601      	mov	r1, r0
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f000 b88d 	b.w	8003d20 <_malloc_r>
 8003c06:	bf00      	nop
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <free>:
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <free+0xc>)
 8003c0e:	4601      	mov	r1, r0
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f000 b819 	b.w	8003c48 <_free_r>
 8003c16:	bf00      	nop
 8003c18:	2000000c 	.word	0x2000000c

08003c1c <memcpy>:
 8003c1c:	440a      	add	r2, r1
 8003c1e:	4291      	cmp	r1, r2
 8003c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003c24:	d100      	bne.n	8003c28 <memcpy+0xc>
 8003c26:	4770      	bx	lr
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c32:	4291      	cmp	r1, r2
 8003c34:	d1f9      	bne.n	8003c2a <memcpy+0xe>
 8003c36:	bd10      	pop	{r4, pc}

08003c38 <memset>:
 8003c38:	4402      	add	r2, r0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	f803 1b01 	strb.w	r1, [r3], #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <_free_r>:
 8003c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d044      	beq.n	8003cd8 <_free_r+0x90>
 8003c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c52:	9001      	str	r0, [sp, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f1a1 0404 	sub.w	r4, r1, #4
 8003c5a:	bfb8      	it	lt
 8003c5c:	18e4      	addlt	r4, r4, r3
 8003c5e:	f000 f929 	bl	8003eb4 <__malloc_lock>
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <_free_r+0x94>)
 8003c64:	9801      	ldr	r0, [sp, #4]
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	b933      	cbnz	r3, 8003c78 <_free_r+0x30>
 8003c6a:	6063      	str	r3, [r4, #4]
 8003c6c:	6014      	str	r4, [r2, #0]
 8003c6e:	b003      	add	sp, #12
 8003c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c74:	f000 b924 	b.w	8003ec0 <__malloc_unlock>
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	d908      	bls.n	8003c8e <_free_r+0x46>
 8003c7c:	6825      	ldr	r5, [r4, #0]
 8003c7e:	1961      	adds	r1, r4, r5
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf01      	itttt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	1949      	addeq	r1, r1, r5
 8003c8a:	6021      	streq	r1, [r4, #0]
 8003c8c:	e7ed      	b.n	8003c6a <_free_r+0x22>
 8003c8e:	461a      	mov	r2, r3
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b10b      	cbz	r3, 8003c98 <_free_r+0x50>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d9fa      	bls.n	8003c8e <_free_r+0x46>
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	1855      	adds	r5, r2, r1
 8003c9c:	42a5      	cmp	r5, r4
 8003c9e:	d10b      	bne.n	8003cb8 <_free_r+0x70>
 8003ca0:	6824      	ldr	r4, [r4, #0]
 8003ca2:	4421      	add	r1, r4
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	d1e0      	bne.n	8003c6e <_free_r+0x26>
 8003cac:	681c      	ldr	r4, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6053      	str	r3, [r2, #4]
 8003cb2:	4421      	add	r1, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	e7da      	b.n	8003c6e <_free_r+0x26>
 8003cb8:	d902      	bls.n	8003cc0 <_free_r+0x78>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	6003      	str	r3, [r0, #0]
 8003cbe:	e7d6      	b.n	8003c6e <_free_r+0x26>
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf04      	itt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	bf04      	itt	eq
 8003cd0:	1949      	addeq	r1, r1, r5
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6054      	str	r4, [r2, #4]
 8003cd6:	e7ca      	b.n	8003c6e <_free_r+0x26>
 8003cd8:	b003      	add	sp, #12
 8003cda:	bd30      	pop	{r4, r5, pc}
 8003cdc:	20000194 	.word	0x20000194

08003ce0 <sbrk_aligned>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4e0e      	ldr	r6, [pc, #56]	; (8003d1c <sbrk_aligned+0x3c>)
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	6831      	ldr	r1, [r6, #0]
 8003ce8:	4605      	mov	r5, r0
 8003cea:	b911      	cbnz	r1, 8003cf2 <sbrk_aligned+0x12>
 8003cec:	f000 f88c 	bl	8003e08 <_sbrk_r>
 8003cf0:	6030      	str	r0, [r6, #0]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f000 f887 	bl	8003e08 <_sbrk_r>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	d00a      	beq.n	8003d14 <sbrk_aligned+0x34>
 8003cfe:	1cc4      	adds	r4, r0, #3
 8003d00:	f024 0403 	bic.w	r4, r4, #3
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d007      	beq.n	8003d18 <sbrk_aligned+0x38>
 8003d08:	1a21      	subs	r1, r4, r0
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 f87c 	bl	8003e08 <_sbrk_r>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d101      	bne.n	8003d18 <sbrk_aligned+0x38>
 8003d14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d18:	4620      	mov	r0, r4
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	20000198 	.word	0x20000198

08003d20 <_malloc_r>:
 8003d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d24:	1ccd      	adds	r5, r1, #3
 8003d26:	f025 0503 	bic.w	r5, r5, #3
 8003d2a:	3508      	adds	r5, #8
 8003d2c:	2d0c      	cmp	r5, #12
 8003d2e:	bf38      	it	cc
 8003d30:	250c      	movcc	r5, #12
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	4607      	mov	r7, r0
 8003d36:	db01      	blt.n	8003d3c <_malloc_r+0x1c>
 8003d38:	42a9      	cmp	r1, r5
 8003d3a:	d905      	bls.n	8003d48 <_malloc_r+0x28>
 8003d3c:	230c      	movs	r3, #12
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	2600      	movs	r6, #0
 8003d42:	4630      	mov	r0, r6
 8003d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d48:	4e2e      	ldr	r6, [pc, #184]	; (8003e04 <_malloc_r+0xe4>)
 8003d4a:	f000 f8b3 	bl	8003eb4 <__malloc_lock>
 8003d4e:	6833      	ldr	r3, [r6, #0]
 8003d50:	461c      	mov	r4, r3
 8003d52:	bb34      	cbnz	r4, 8003da2 <_malloc_r+0x82>
 8003d54:	4629      	mov	r1, r5
 8003d56:	4638      	mov	r0, r7
 8003d58:	f7ff ffc2 	bl	8003ce0 <sbrk_aligned>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	4604      	mov	r4, r0
 8003d60:	d14d      	bne.n	8003dfe <_malloc_r+0xde>
 8003d62:	6834      	ldr	r4, [r6, #0]
 8003d64:	4626      	mov	r6, r4
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d140      	bne.n	8003dec <_malloc_r+0xcc>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	4638      	mov	r0, r7
 8003d70:	eb04 0803 	add.w	r8, r4, r3
 8003d74:	f000 f848 	bl	8003e08 <_sbrk_r>
 8003d78:	4580      	cmp	r8, r0
 8003d7a:	d13a      	bne.n	8003df2 <_malloc_r+0xd2>
 8003d7c:	6821      	ldr	r1, [r4, #0]
 8003d7e:	3503      	adds	r5, #3
 8003d80:	1a6d      	subs	r5, r5, r1
 8003d82:	f025 0503 	bic.w	r5, r5, #3
 8003d86:	3508      	adds	r5, #8
 8003d88:	2d0c      	cmp	r5, #12
 8003d8a:	bf38      	it	cc
 8003d8c:	250c      	movcc	r5, #12
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4638      	mov	r0, r7
 8003d92:	f7ff ffa5 	bl	8003ce0 <sbrk_aligned>
 8003d96:	3001      	adds	r0, #1
 8003d98:	d02b      	beq.n	8003df2 <_malloc_r+0xd2>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	442b      	add	r3, r5
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	e00e      	b.n	8003dc0 <_malloc_r+0xa0>
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	1b52      	subs	r2, r2, r5
 8003da6:	d41e      	bmi.n	8003de6 <_malloc_r+0xc6>
 8003da8:	2a0b      	cmp	r2, #11
 8003daa:	d916      	bls.n	8003dda <_malloc_r+0xba>
 8003dac:	1961      	adds	r1, r4, r5
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	6025      	str	r5, [r4, #0]
 8003db2:	bf18      	it	ne
 8003db4:	6059      	strne	r1, [r3, #4]
 8003db6:	6863      	ldr	r3, [r4, #4]
 8003db8:	bf08      	it	eq
 8003dba:	6031      	streq	r1, [r6, #0]
 8003dbc:	5162      	str	r2, [r4, r5]
 8003dbe:	604b      	str	r3, [r1, #4]
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f104 060b 	add.w	r6, r4, #11
 8003dc6:	f000 f87b 	bl	8003ec0 <__malloc_unlock>
 8003dca:	f026 0607 	bic.w	r6, r6, #7
 8003dce:	1d23      	adds	r3, r4, #4
 8003dd0:	1af2      	subs	r2, r6, r3
 8003dd2:	d0b6      	beq.n	8003d42 <_malloc_r+0x22>
 8003dd4:	1b9b      	subs	r3, r3, r6
 8003dd6:	50a3      	str	r3, [r4, r2]
 8003dd8:	e7b3      	b.n	8003d42 <_malloc_r+0x22>
 8003dda:	6862      	ldr	r2, [r4, #4]
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	bf0c      	ite	eq
 8003de0:	6032      	streq	r2, [r6, #0]
 8003de2:	605a      	strne	r2, [r3, #4]
 8003de4:	e7ec      	b.n	8003dc0 <_malloc_r+0xa0>
 8003de6:	4623      	mov	r3, r4
 8003de8:	6864      	ldr	r4, [r4, #4]
 8003dea:	e7b2      	b.n	8003d52 <_malloc_r+0x32>
 8003dec:	4634      	mov	r4, r6
 8003dee:	6876      	ldr	r6, [r6, #4]
 8003df0:	e7b9      	b.n	8003d66 <_malloc_r+0x46>
 8003df2:	230c      	movs	r3, #12
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4638      	mov	r0, r7
 8003df8:	f000 f862 	bl	8003ec0 <__malloc_unlock>
 8003dfc:	e7a1      	b.n	8003d42 <_malloc_r+0x22>
 8003dfe:	6025      	str	r5, [r4, #0]
 8003e00:	e7de      	b.n	8003dc0 <_malloc_r+0xa0>
 8003e02:	bf00      	nop
 8003e04:	20000194 	.word	0x20000194

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4d06      	ldr	r5, [pc, #24]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fd fc36 	bl	8001684 <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	200001a0 	.word	0x200001a0

08003e28 <_raise_r>:
 8003e28:	291f      	cmp	r1, #31
 8003e2a:	b538      	push	{r3, r4, r5, lr}
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	460d      	mov	r5, r1
 8003e30:	d904      	bls.n	8003e3c <_raise_r+0x14>
 8003e32:	2316      	movs	r3, #22
 8003e34:	6003      	str	r3, [r0, #0]
 8003e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e3e:	b112      	cbz	r2, 8003e46 <_raise_r+0x1e>
 8003e40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e44:	b94b      	cbnz	r3, 8003e5a <_raise_r+0x32>
 8003e46:	4620      	mov	r0, r4
 8003e48:	f000 f830 	bl	8003eac <_getpid_r>
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4601      	mov	r1, r0
 8003e50:	4620      	mov	r0, r4
 8003e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e56:	f000 b817 	b.w	8003e88 <_kill_r>
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d00a      	beq.n	8003e74 <_raise_r+0x4c>
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	d103      	bne.n	8003e6a <_raise_r+0x42>
 8003e62:	2316      	movs	r3, #22
 8003e64:	6003      	str	r3, [r0, #0]
 8003e66:	2001      	movs	r0, #1
 8003e68:	e7e7      	b.n	8003e3a <_raise_r+0x12>
 8003e6a:	2400      	movs	r4, #0
 8003e6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e70:	4628      	mov	r0, r5
 8003e72:	4798      	blx	r3
 8003e74:	2000      	movs	r0, #0
 8003e76:	e7e0      	b.n	8003e3a <_raise_r+0x12>

08003e78 <raise>:
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <raise+0xc>)
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	f7ff bfd3 	b.w	8003e28 <_raise_r>
 8003e82:	bf00      	nop
 8003e84:	2000000c 	.word	0x2000000c

08003e88 <_kill_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4d07      	ldr	r5, [pc, #28]	; (8003ea8 <_kill_r+0x20>)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	f7fd fbdb 	bl	8001650 <_kill>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d102      	bne.n	8003ea4 <_kill_r+0x1c>
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	b103      	cbz	r3, 8003ea4 <_kill_r+0x1c>
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	bd38      	pop	{r3, r4, r5, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200001a0 	.word	0x200001a0

08003eac <_getpid_r>:
 8003eac:	f7fd bbc8 	b.w	8001640 <_getpid>

08003eb0 <__retarget_lock_acquire_recursive>:
 8003eb0:	4770      	bx	lr

08003eb2 <__retarget_lock_release_recursive>:
 8003eb2:	4770      	bx	lr

08003eb4 <__malloc_lock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	; (8003ebc <__malloc_lock+0x8>)
 8003eb6:	f7ff bffb 	b.w	8003eb0 <__retarget_lock_acquire_recursive>
 8003eba:	bf00      	nop
 8003ebc:	2000019c 	.word	0x2000019c

08003ec0 <__malloc_unlock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__malloc_unlock+0x8>)
 8003ec2:	f7ff bff6 	b.w	8003eb2 <__retarget_lock_release_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	2000019c 	.word	0x2000019c

08003ecc <_init>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr

08003ed8 <_fini>:
 8003ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eda:	bf00      	nop
 8003edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ede:	bc08      	pop	{r3}
 8003ee0:	469e      	mov	lr, r3
 8003ee2:	4770      	bx	lr
