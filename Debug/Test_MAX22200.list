
Test_MAX22200.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002240  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002428  08002428  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002428  08002428  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002428  08002428  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002428  08002428  00012428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  0800243c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  0800243c  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ba2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001861  00000000  00000000  00027bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00029440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  00029c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037c3  00000000  00000000  0002a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000919f  00000000  00000000  0002db1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2ba2  00000000  00000000  00036cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e985c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e48  00000000  00000000  000e98ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002400 	.word	0x08002400

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002400 	.word	0x08002400

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022e:	4b23      	ldr	r3, [pc, #140]	; (80002bc <MX_GPIO_Init+0xa4>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a22      	ldr	r2, [pc, #136]	; (80002bc <MX_GPIO_Init+0xa4>)
 8000234:	f043 0302 	orr.w	r3, r3, #2
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023a:	4b20      	ldr	r3, [pc, #128]	; (80002bc <MX_GPIO_Init+0xa4>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	f003 0302 	and.w	r3, r3, #2
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <MX_GPIO_Init+0xa4>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <MX_GPIO_Init+0xa4>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <MX_GPIO_Init+0xa4>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRV_ENABLE_Pin|DRV_CMD_Pin|DRV_TRIGB_Pin, GPIO_PIN_RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	21c1      	movs	r1, #193	; 0xc1
 8000262:	4817      	ldr	r0, [pc, #92]	; (80002c0 <MX_GPIO_Init+0xa8>)
 8000264:	f000 fd58 	bl	8000d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_DRV_Pin|DRV_TRIGA_Pin, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800026e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000272:	f000 fd51 	bl	8000d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin|DRV_CMD_Pin|DRV_TRIGB_Pin;
 8000276:	23c1      	movs	r3, #193	; 0xc1
 8000278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027a:	2301      	movs	r3, #1
 800027c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000286:	f107 030c 	add.w	r3, r7, #12
 800028a:	4619      	mov	r1, r3
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <MX_GPIO_Init+0xa8>)
 800028e:	f000 fbc1 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_DRV_Pin|DRV_TRIGA_Pin;
 8000292:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000298:	2301      	movs	r3, #1
 800029a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a4:	f107 030c 	add.w	r3, r7, #12
 80002a8:	4619      	mov	r1, r3
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f000 fbb1 	bl	8000a14 <HAL_GPIO_Init>

}
 80002b2:	bf00      	nop
 80002b4:	3720      	adds	r7, #32
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000
 80002c0:	48000400 	.word	0x48000400

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
       HAL_Init();
 80002ca:	f000 fa2d 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ce:	f000 f865 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d2:	f7ff ffa1 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002d6:	f000 f8b3 	bl	8000440 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t status2 = MAX22200_write_register(0x01, 0xC343990);
 80002da:	492c      	ldr	r1, [pc, #176]	; (800038c <main+0xc8>)
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 f9bb 	bl	8000658 <MAX22200_write_register>
 80002e2:	4603      	mov	r3, r0
 80002e4:	73fb      	strb	r3, [r7, #15]
  uint8_t status3 = MAX22200_write_register(0x02, 0xC343990);
 80002e6:	4929      	ldr	r1, [pc, #164]	; (800038c <main+0xc8>)
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 f9b5 	bl	8000658 <MAX22200_write_register>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73bb      	strb	r3, [r7, #14]
  uint8_t status4 = MAX22200_write_register(0x03, 0xC343990);
 80002f2:	4926      	ldr	r1, [pc, #152]	; (800038c <main+0xc8>)
 80002f4:	2003      	movs	r0, #3
 80002f6:	f000 f9af 	bl	8000658 <MAX22200_write_register>
 80002fa:	4603      	mov	r3, r0
 80002fc:	737b      	strb	r3, [r7, #13]
  uint8_t status5 = MAX22200_write_register(0x04, 0xC343990);
 80002fe:	4923      	ldr	r1, [pc, #140]	; (800038c <main+0xc8>)
 8000300:	2004      	movs	r0, #4
 8000302:	f000 f9a9 	bl	8000658 <MAX22200_write_register>
 8000306:	4603      	mov	r3, r0
 8000308:	733b      	strb	r3, [r7, #12]
  uint8_t status6 = MAX22200_write_register(0x05, 0xC343990);
 800030a:	4920      	ldr	r1, [pc, #128]	; (800038c <main+0xc8>)
 800030c:	2005      	movs	r0, #5
 800030e:	f000 f9a3 	bl	8000658 <MAX22200_write_register>
 8000312:	4603      	mov	r3, r0
 8000314:	72fb      	strb	r3, [r7, #11]
  uint8_t status7 = MAX22200_write_register(0x06, 0xC343990);
 8000316:	491d      	ldr	r1, [pc, #116]	; (800038c <main+0xc8>)
 8000318:	2006      	movs	r0, #6
 800031a:	f000 f99d 	bl	8000658 <MAX22200_write_register>
 800031e:	4603      	mov	r3, r0
 8000320:	72bb      	strb	r3, [r7, #10]
  uint8_t status8 = MAX22200_write_register(0x07, 0xC343990);
 8000322:	491a      	ldr	r1, [pc, #104]	; (800038c <main+0xc8>)
 8000324:	2007      	movs	r0, #7
 8000326:	f000 f997 	bl	8000658 <MAX22200_write_register>
 800032a:	4603      	mov	r3, r0
 800032c:	727b      	strb	r3, [r7, #9]
  uint8_t status9 = MAX22200_write_register(0x08, 0xC343990);
 800032e:	4917      	ldr	r1, [pc, #92]	; (800038c <main+0xc8>)
 8000330:	2008      	movs	r0, #8
 8000332:	f000 f991 	bl	8000658 <MAX22200_write_register>
 8000336:	4603      	mov	r3, r0
 8000338:	723b      	strb	r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t status10 = MAX22200_write_register(0x00, 0xAA04AA01);
 800033a:	4915      	ldr	r1, [pc, #84]	; (8000390 <main+0xcc>)
 800033c:	2000      	movs	r0, #0
 800033e:	f000 f98b 	bl	8000658 <MAX22200_write_register>
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(3000);
 8000346:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800034a:	f000 fa5d 	bl	8000808 <HAL_Delay>

	  uint8_t status11 = MAX22200_write_register(0x00, 0x0004AA01);
 800034e:	4911      	ldr	r1, [pc, #68]	; (8000394 <main+0xd0>)
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f981 	bl	8000658 <MAX22200_write_register>
 8000356:	4603      	mov	r3, r0
 8000358:	71bb      	strb	r3, [r7, #6]
	  HAL_Delay(3000);
 800035a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800035e:	f000 fa53 	bl	8000808 <HAL_Delay>
	  // Setup CH1 with 80% duty cycle (HIT), then go to 10% duty cycle (Hold), use trigger-pin
	//MAX22200_Set_CH (channel, HalfScale, HOLD_DutyCycle, TRIG_pin, HIT_DutyCycle, HIT_Time, V_Mode, HighSideMode, FREQ_CFG, SRC, OL_EN, DPM_EN, HHF_EN);

	  uint8_t status12 = MAX22200_write_register(0x00, 0x5504AA01);
 8000362:	490d      	ldr	r1, [pc, #52]	; (8000398 <main+0xd4>)
 8000364:	2000      	movs	r0, #0
 8000366:	f000 f977 	bl	8000658 <MAX22200_write_register>
 800036a:	4603      	mov	r3, r0
 800036c:	717b      	strb	r3, [r7, #5]
	  HAL_Delay(3000);
 800036e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000372:	f000 fa49 	bl	8000808 <HAL_Delay>

	  uint8_t status13 = MAX22200_write_register(0x00, 0x0004AA01);
 8000376:	4907      	ldr	r1, [pc, #28]	; (8000394 <main+0xd0>)
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f96d 	bl	8000658 <MAX22200_write_register>
 800037e:	4603      	mov	r3, r0
 8000380:	713b      	strb	r3, [r7, #4]
	  HAL_Delay(3000);
 8000382:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000386:	f000 fa3f 	bl	8000808 <HAL_Delay>
  {
 800038a:	e7d6      	b.n	800033a <main+0x76>
 800038c:	0c343990 	.word	0x0c343990
 8000390:	aa04aa01 	.word	0xaa04aa01
 8000394:	0004aa01 	.word	0x0004aa01
 8000398:	5504aa01 	.word	0x5504aa01

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b094      	sub	sp, #80	; 0x50
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2238      	movs	r2, #56	; 0x38
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f820 	bl	80023f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003c2:	f000 fcc1 	bl	8000d48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d0:	2340      	movs	r3, #64	; 0x40
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d8:	2302      	movs	r3, #2
 80003da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003dc:	2304      	movs	r3, #4
 80003de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80003e0:	234b      	movs	r3, #75	; 0x4b
 80003e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ec:	2302      	movs	r3, #2
 80003ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fd4b 	bl	8000e90 <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000400:	f000 f818 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	2303      	movs	r3, #3
 800040a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2104      	movs	r1, #4
 800041c:	4618      	mov	r0, r3
 800041e:	f001 f84f 	bl	80014c0 <HAL_RCC_ClockConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000428:	f000 f804 	bl	8000434 <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3750      	adds	r7, #80	; 0x50
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <MX_SPI1_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_SPI1_Init+0x74>)
 800044c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_SPI1_Init+0x74>)
 800045a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800045e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_SPI1_Init+0x74>)
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000476:	2238      	movs	r2, #56	; 0x38
 8000478:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_SPI1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SPI1_Init+0x74>)
 800048e:	2207      	movs	r2, #7
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SPI1_Init+0x74>)
 800049a:	2208      	movs	r2, #8
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_SPI1_Init+0x74>)
 80004a0:	f001 f9f2 	bl	8001888 <HAL_SPI_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004aa:	f7ff ffc3 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000028 	.word	0x20000028
 80004b8:	40013000 	.word	0x40013000

080004bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08a      	sub	sp, #40	; 0x28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a17      	ldr	r2, [pc, #92]	; (8000538 <HAL_SPI_MspInit+0x7c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d127      	bne.n	800052e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <HAL_SPI_MspInit+0x80>)
 80004e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004e2:	4a16      	ldr	r2, [pc, #88]	; (800053c <HAL_SPI_MspInit+0x80>)
 80004e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <HAL_SPI_MspInit+0x80>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_SPI_MspInit+0x80>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a10      	ldr	r2, [pc, #64]	; (800053c <HAL_SPI_MspInit+0x80>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_SPI_MspInit+0x80>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800050e:	2338      	movs	r3, #56	; 0x38
 8000510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000512:	2302      	movs	r3, #2
 8000514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2300      	movs	r3, #0
 800051c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800051e:	2305      	movs	r3, #5
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <HAL_SPI_MspInit+0x84>)
 800052a:	f000 fa73 	bl	8000a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800052e:	bf00      	nop
 8000530:	3728      	adds	r7, #40	; 0x28
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40013000 	.word	0x40013000
 800053c:	40021000 	.word	0x40021000
 8000540:	48000400 	.word	0x48000400

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x44>)
 800054c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_MspInit+0x44>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6613      	str	r3, [r2, #96]	; 0x60
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_MspInit+0x44>)
 8000558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_MspInit+0x44>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <HAL_MspInit+0x44>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	6593      	str	r3, [r2, #88]	; 0x58
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_MspInit+0x44>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f8f8 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SystemInit+0x20>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <SystemInit+0x20>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000606:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490e      	ldr	r1, [pc, #56]	; (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0b      	ldr	r4, [pc, #44]	; (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062e:	f7ff ffd7 	bl	80005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000632:	f001 feb9 	bl	80023a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000636:	f7ff fe45 	bl	80002c4 <main>

0800063a <LoopForever>:

LoopForever:
    b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   r0, =_estack
 800063c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000648:	08002430 	.word	0x08002430
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000650:	200000b0 	.word	0x200000b0

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <MAX22200_write_register>:
}



uint8_t  MAX22200_write_register(uint8_t reg_adr, uint32_t data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
    // first we need to writ the Command byte to setup the SPI transfer
	MAX22200_tx[0] = ((reg_adr<<1) & 0x7e) | 0x80;                    // MSB = 1 -> write - LSB = 0 -> 32 bit register access
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	b25b      	sxtb	r3, r3
 800066a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800066e:	b25b      	sxtb	r3, r3
 8000670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000674:	b25b      	sxtb	r3, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <MAX22200_write_register+0xc0>)
 800067a:	701a      	strb	r2, [r3, #0]

	MAX22200_CMD_HIGH
 800067c:	2201      	movs	r2, #1
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	4826      	ldr	r0, [pc, #152]	; (800071c <MAX22200_write_register+0xc4>)
 8000682:	f000 fb49 	bl	8000d18 <HAL_GPIO_WritePin>
	MAX22200_CS_LOW
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fb42 	bl	8000d18 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, MAX22200_tx, MAX22200_rx, 1, 2);  // SPI RW 1 bytes
 8000694:	2302      	movs	r3, #2
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MAX22200_write_register+0xc8>)
 800069c:	491e      	ldr	r1, [pc, #120]	; (8000718 <MAX22200_write_register+0xc0>)
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <MAX22200_write_register+0xcc>)
 80006a0:	f001 fb0b 	bl	8001cba <HAL_SPI_TransmitReceive>

	MAX22200_CS_HIGH
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f000 fb33 	bl	8000d18 <HAL_GPIO_WritePin>
	MAX22200_CMD_LOW
 80006b2:	2200      	movs	r2, #0
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	4819      	ldr	r0, [pc, #100]	; (800071c <MAX22200_write_register+0xc4>)
 80006b8:	f000 fb2e 	bl	8000d18 <HAL_GPIO_WritePin>

	// now we write the actual data
	MAX22200_tx[3] = ( data >> 24 ) & 0xff;   // MS Byte
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	0e1b      	lsrs	r3, r3, #24
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MAX22200_write_register+0xc0>)
 80006c4:	70da      	strb	r2, [r3, #3]
	MAX22200_tx[2] = ( data >> 16 ) & 0xff;   //
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	0c1b      	lsrs	r3, r3, #16
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MAX22200_write_register+0xc0>)
 80006ce:	709a      	strb	r2, [r3, #2]
	MAX22200_tx[1] = ( data >> 8  ) & 0xff;   //
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MAX22200_write_register+0xc0>)
 80006d8:	705a      	strb	r2, [r3, #1]
	MAX22200_tx[0] = ( data       ) & 0xff;   // LS Byte
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MAX22200_write_register+0xc0>)
 80006e0:	701a      	strb	r2, [r3, #0]

	MAX22200_CS_LOW
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 fb14 	bl	8000d18 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MAX22200_tx, 4, 2);                      // SPI W 4 bytes
 80006f0:	2302      	movs	r3, #2
 80006f2:	2204      	movs	r2, #4
 80006f4:	4908      	ldr	r1, [pc, #32]	; (8000718 <MAX22200_write_register+0xc0>)
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <MAX22200_write_register+0xcc>)
 80006f8:	f001 f971 	bl	80019de <HAL_SPI_Transmit>

	MAX22200_CS_HIGH
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f000 fb07 	bl	8000d18 <HAL_GPIO_WritePin>

	return MAX22200_rx[0];                                            // return the status byte
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MAX22200_write_register+0xc8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000008c 	.word	0x2000008c
 800071c:	48000400 	.word	0x48000400
 8000720:	2000009c 	.word	0x2000009c
 8000724:	20000028 	.word	0x20000028

08000728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000732:	2003      	movs	r0, #3
 8000734:	f000 f93c 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000738:	200f      	movs	r0, #15
 800073a:	f000 f80d 	bl	8000758 <HAL_InitTick>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	e001      	b.n	800074e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800074a:	f7ff fefb 	bl	8000544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074e:	79fb      	ldrb	r3, [r7, #7]

}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_InitTick+0x68>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d022      	beq.n	80007b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_InitTick+0x6c>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_InitTick+0x68>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000778:	fbb1 f3f3 	udiv	r3, r1, r3
 800077c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f93a 	bl	80009fa <HAL_SYSTICK_Config>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10f      	bne.n	80007ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b0f      	cmp	r3, #15
 8000790:	d809      	bhi.n	80007a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000792:	2200      	movs	r2, #0
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800079a:	f000 f914 	bl	80009c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_InitTick+0x70>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	e007      	b.n	80007b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	e004      	b.n	80007b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	e001      	b.n	80007b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4413      	add	r3, r2
 80007da:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <HAL_IncTick+0x1c>)
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	20000008 	.word	0x20000008

080007f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_GetTick+0x14>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200000ac 	.word	0x200000ac

08000808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff ffee 	bl	80007f0 <HAL_GetTick>
 8000814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000820:	d004      	beq.n	800082c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_Delay+0x40>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082c:	bf00      	nop
 800082e:	f7ff ffdf 	bl	80007f0 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	429a      	cmp	r2, r3
 800083c:	d8f7      	bhi.n	800082e <HAL_Delay+0x26>
  {
  }
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000008 	.word	0x20000008

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000990:	f7ff ff8e 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff47 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff5e 	bl	8000894 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ff90 	bl	8000904 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff5f 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffb2 	bl	800096c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a22:	e15a      	b.n	8000cda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 814c 	beq.w	8000cd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d005      	beq.n	8000a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d130      	bne.n	8000ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	091b      	lsrs	r3, r3, #4
 8000aa0:	f003 0201 	and.w	r2, r3, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d017      	beq.n	8000af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d123      	bne.n	8000b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	08da      	lsrs	r2, r3, #3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3208      	adds	r2, #8
 8000b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	220f      	movs	r2, #15
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3208      	adds	r2, #8
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0203 	and.w	r2, r3, #3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80a6 	beq.w	8000cd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4b5b      	ldr	r3, [pc, #364]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8c:	4a5a      	ldr	r2, [pc, #360]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6613      	str	r3, [r2, #96]	; 0x60
 8000b94:	4b58      	ldr	r3, [pc, #352]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ba0:	4a56      	ldr	r2, [pc, #344]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bca:	d01f      	beq.n	8000c0c <HAL_GPIO_Init+0x1f8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <HAL_GPIO_Init+0x2ec>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d019      	beq.n	8000c08 <HAL_GPIO_Init+0x1f4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1f0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4a      	ldr	r2, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x2f4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_GPIO_Init+0x2fc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	e00a      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	e008      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e006      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c1e:	4937      	ldr	r1, [pc, #220]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c50:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c7a:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cce:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_GPIO_Init+0x300>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f ae9d 	bne.w	8000a24 <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48001400 	.word	0x48001400
 8000d14:	40010400 	.word	0x40010400

08000d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
 8000d24:	4613      	mov	r3, r2
 8000d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d28:	787b      	ldrb	r3, [r7, #1]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d141      	bne.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d56:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d62:	d131      	bne.n	8000dc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d64:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d6a:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d74:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d7c:	4a41      	ldr	r2, [pc, #260]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2232      	movs	r2, #50	; 0x32
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	4a3f      	ldr	r2, [pc, #252]	; (8000e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d90:	fba2 2303 	umull	r2, r3, r2, r3
 8000d94:	0c9b      	lsrs	r3, r3, #18
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d9a:	e002      	b.n	8000da2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dae:	d102      	bne.n	8000db6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f2      	bne.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc2:	d158      	bne.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e057      	b.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000dd8:	e04d      	b.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000de0:	d141      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dee:	d131      	bne.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2232      	movs	r2, #50	; 0x32
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e26:	e002      	b.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3a:	d102      	bne.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f2      	bne.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4e:	d112      	bne.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e011      	b.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e64:	e007      	b.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40007000 	.word	0x40007000
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	431bde83 	.word	0x431bde83

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e306      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d075      	beq.n	8000f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eae:	4b97      	ldr	r3, [pc, #604]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb8:	4b94      	ldr	r3, [pc, #592]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b0c      	cmp	r3, #12
 8000ec6:	d102      	bne.n	8000ece <HAL_RCC_OscConfig+0x3e>
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d002      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x44>
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d10b      	bne.n	8000eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	4b8d      	ldr	r3, [pc, #564]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d05b      	beq.n	8000f98 <HAL_RCC_OscConfig+0x108>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d157      	bne.n	8000f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e2e1      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d106      	bne.n	8000f04 <HAL_RCC_OscConfig+0x74>
 8000ef6:	4b85      	ldr	r3, [pc, #532]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a84      	ldr	r2, [pc, #528]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e01d      	b.n	8000f40 <HAL_RCC_OscConfig+0xb0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x98>
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a7e      	ldr	r2, [pc, #504]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b7c      	ldr	r3, [pc, #496]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a7b      	ldr	r2, [pc, #492]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e00b      	b.n	8000f40 <HAL_RCC_OscConfig+0xb0>
 8000f28:	4b78      	ldr	r3, [pc, #480]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a77      	ldr	r2, [pc, #476]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b75      	ldr	r3, [pc, #468]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a74      	ldr	r2, [pc, #464]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d013      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc52 	bl	80007f0 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fc4e 	bl	80007f0 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	; 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e2a6      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f62:	4b6a      	ldr	r3, [pc, #424]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0xc0>
 8000f6e:	e014      	b.n	8000f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc3e 	bl	80007f0 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fc3a 	bl	80007f0 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e292      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f8a:	4b60      	ldr	r3, [pc, #384]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0xe8>
 8000f96:	e000      	b.n	8000f9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d075      	beq.n	8001092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fa6:	4b59      	ldr	r3, [pc, #356]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fb0:	4b56      	ldr	r3, [pc, #344]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b0c      	cmp	r3, #12
 8000fbe:	d102      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x136>
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d002      	beq.n	8000fcc <HAL_RCC_OscConfig+0x13c>
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d11f      	bne.n	800100c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x154>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e265      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b49      	ldr	r3, [pc, #292]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	4946      	ldr	r1, [pc, #280]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fbab 	bl	8000758 <HAL_InitTick>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d043      	beq.n	8001090 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e251      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d023      	beq.n	800105c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a3c      	ldr	r2, [pc, #240]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001020:	f7ff fbe6 	bl	80007f0 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001028:	f7ff fbe2 	bl	80007f0 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e23a      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	061b      	lsls	r3, r3, #24
 8001054:	492d      	ldr	r1, [pc, #180]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
 800105a:	e01a      	b.n	8001092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2a      	ldr	r2, [pc, #168]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8001062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fbc2 	bl	80007f0 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fbbe 	bl	80007f0 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e216      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1e0>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d041      	beq.n	8001122 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01c      	beq.n	80010e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 80010a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ac:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb9b 	bl	80007f0 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fb97 	bl	80007f0 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1ef      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 80010d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0ef      	beq.n	80010be <HAL_RCC_OscConfig+0x22e>
 80010de:	e020      	b.n	8001122 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 80010e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f0:	f7ff fb7e 	bl	80007f0 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010f6:	e00d      	b.n	8001114 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f8:	f7ff fb7a 	bl	80007f0 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d906      	bls.n	8001114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1d2      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001114:	4b8c      	ldr	r3, [pc, #560]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1ea      	bne.n	80010f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 80a6 	beq.w	800127c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001134:	4b84      	ldr	r3, [pc, #528]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_OscConfig+0x2b4>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x2b6>
 8001144:	2300      	movs	r3, #0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00d      	beq.n	8001166 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a7e      	ldr	r2, [pc, #504]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b7c      	ldr	r3, [pc, #496]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001166:	4b79      	ldr	r3, [pc, #484]	; (800134c <HAL_RCC_OscConfig+0x4bc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001172:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_OscConfig+0x4bc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a75      	ldr	r2, [pc, #468]	; (800134c <HAL_RCC_OscConfig+0x4bc>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fb37 	bl	80007f0 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001186:	f7ff fb33 	bl	80007f0 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e18b      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001198:	4b6c      	ldr	r3, [pc, #432]	; (800134c <HAL_RCC_OscConfig+0x4bc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d108      	bne.n	80011be <HAL_RCC_OscConfig+0x32e>
 80011ac:	4b66      	ldr	r3, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b2:	4a65      	ldr	r2, [pc, #404]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011bc:	e024      	b.n	8001208 <HAL_RCC_OscConfig+0x378>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d110      	bne.n	80011e8 <HAL_RCC_OscConfig+0x358>
 80011c6:	4b60      	ldr	r3, [pc, #384]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011cc:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011dc:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e6:	e00f      	b.n	8001208 <HAL_RCC_OscConfig+0x378>
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ee:	4a56      	ldr	r2, [pc, #344]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d016      	beq.n	800123e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff faee 	bl	80007f0 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff faea 	bl	80007f0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e140      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ed      	beq.n	8001218 <HAL_RCC_OscConfig+0x388>
 800123c:	e015      	b.n	800126a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123e:	f7ff fad7 	bl	80007f0 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fad3 	bl	80007f0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e129      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 800125e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1ed      	bne.n	8001246 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800126a:	7ffb      	ldrb	r3, [r7, #31]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001270:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d03c      	beq.n	8001302 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01c      	beq.n	80012ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001296:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff faa6 	bl	80007f0 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012a8:	f7ff faa2 	bl	80007f0 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e0fa      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ef      	beq.n	80012a8 <HAL_RCC_OscConfig+0x418>
 80012c8:	e01b      	b.n	8001302 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80012cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff fa89 	bl	80007f0 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e2:	f7ff fa85 	bl	80007f0 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0dd      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 80012f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1ef      	bne.n	80012e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80d1 	beq.w	80014ae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b0c      	cmp	r3, #12
 8001316:	f000 808b 	beq.w	8001430 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d15e      	bne.n	80013e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_RCC_OscConfig+0x4b8>)
 8001328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800132c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fa5f 	bl	80007f0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001334:	e00c      	b.n	8001350 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fa5b 	bl	80007f0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d905      	bls.n	8001350 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0b3      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
 8001348:	40021000 	.word	0x40021000
 800134c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001350:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ec      	bne.n	8001336 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	4b56      	ldr	r3, [pc, #344]	; (80014bc <HAL_RCC_OscConfig+0x62c>)
 8001362:	4013      	ands	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6a11      	ldr	r1, [r2, #32]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800136c:	3a01      	subs	r2, #1
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	4311      	orrs	r1, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001376:	0212      	lsls	r2, r2, #8
 8001378:	4311      	orrs	r1, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800137e:	0852      	lsrs	r2, r2, #1
 8001380:	3a01      	subs	r2, #1
 8001382:	0552      	lsls	r2, r2, #21
 8001384:	4311      	orrs	r1, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800138a:	0852      	lsrs	r2, r2, #1
 800138c:	3a01      	subs	r2, #1
 800138e:	0652      	lsls	r2, r2, #25
 8001390:	4311      	orrs	r1, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001396:	06d2      	lsls	r2, r2, #27
 8001398:	430a      	orrs	r2, r1
 800139a:	4947      	ldr	r1, [pc, #284]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 800139c:	4313      	orrs	r3, r2
 800139e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4a41      	ldr	r2, [pc, #260]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fa1a 	bl	80007f0 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff fa16 	bl	80007f0 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e06e      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x530>
 80013de:	e066      	b.n	80014ae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013f2:	f023 0303 	bic.w	r3, r3, #3
 80013f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 80013fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff f9f2 	bl	80007f0 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff f9ee 	bl	80007f0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e046      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x580>
 800142e:	e03e      	b.n	80014ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e039      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_RCC_OscConfig+0x628>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	429a      	cmp	r2, r3
 800144e:	d12c      	bne.n	80014aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	3b01      	subs	r3, #1
 800145c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d123      	bne.n	80014aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d11b      	bne.n	80014aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d113      	bne.n	80014aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	3b01      	subs	r3, #1
 8001490:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d109      	bne.n	80014aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	3b01      	subs	r3, #1
 80014a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	019f800c 	.word	0x019f800c

080014c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e11e      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b91      	ldr	r3, [pc, #580]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d910      	bls.n	8001508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b8e      	ldr	r3, [pc, #568]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 020f 	bic.w	r2, r3, #15
 80014ee:	498c      	ldr	r1, [pc, #560]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b8a      	ldr	r3, [pc, #552]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e106      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d073      	beq.n	80015fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d129      	bne.n	8001570 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151c:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0f4      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800152c:	f000 f966 	bl	80017fc <RCC_GetSysClockFreqFromPLLSource>
 8001530:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4a7c      	ldr	r2, [pc, #496]	; (8001728 <HAL_RCC_ClockConfig+0x268>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d93f      	bls.n	80015ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800153a:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800154e:	2b00      	cmp	r3, #0
 8001550:	d033      	beq.n	80015ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d12f      	bne.n	80015ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800155a:	4b72      	ldr	r3, [pc, #456]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e024      	b.n	80015ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d107      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001578:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0c6      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001588:	4b66      	ldr	r3, [pc, #408]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0be      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001598:	f000 f8ce 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 800159c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_RCC_ClockConfig+0x268>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d909      	bls.n	80015ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ae:	4a5d      	ldr	r2, [pc, #372]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4957      	ldr	r1, [pc, #348]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015cc:	f7ff f910 	bl	80007f0 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff f90c 	bl	80007f0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e095      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d023      	beq.n	8001650 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a42      	ldr	r2, [pc, #264]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800161a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800161e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001634:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4936      	ldr	r1, [pc, #216]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
 800164e:	e008      	b.n	8001662 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b80      	cmp	r3, #128	; 0x80
 8001654:	d105      	bne.n	8001662 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4a32      	ldr	r2, [pc, #200]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800165c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001660:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d21d      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 020f 	bic.w	r2, r3, #15
 8001678:	4929      	ldr	r1, [pc, #164]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001680:	f7ff f8b6 	bl	80007f0 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff f8b2 	bl	80007f0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e03b      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1ed      	bne.n	8001688 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4917      	ldr	r1, [pc, #92]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490f      	ldr	r1, [pc, #60]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ea:	f000 f825 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490c      	ldr	r1, [pc, #48]	; (800172c <HAL_RCC_ClockConfig+0x26c>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x270>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f822 	bl	8000758 <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000
 8001724:	40021000 	.word	0x40021000
 8001728:	04c4b400 	.word	0x04c4b400
 800172c:	08002418 	.word	0x08002418
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d102      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e047      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d102      	bne.n	8001762 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e03e      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d136      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3301      	adds	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800178c:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001796:	68d2      	ldr	r2, [r2, #12]
 8001798:	0a12      	lsrs	r2, r2, #8
 800179a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
      break;
 80017a4:	e00c      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b0:	68d2      	ldr	r2, [r2, #12]
 80017b2:	0a12      	lsrs	r2, r2, #8
 80017b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
      break;
 80017be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0e5b      	lsrs	r3, r3, #25
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e001      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017e0:	693b      	ldr	r3, [r7, #16]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	00f42400 	.word	0x00f42400
 80017f8:	007a1200 	.word	0x007a1200

080017fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3301      	adds	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d10c      	bne.n	800183a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800182a:	68d2      	ldr	r2, [r2, #12]
 800182c:	0a12      	lsrs	r2, r2, #8
 800182e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
    break;
 8001838:	e00c      	b.n	8001854 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001844:	68d2      	ldr	r2, [r2, #12]
 8001846:	0a12      	lsrs	r2, r2, #8
 8001848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
    break;
 8001852:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0e5b      	lsrs	r3, r3, #25
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	3301      	adds	r3, #1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000
 8001880:	007a1200 	.word	0x007a1200
 8001884:	00f42400 	.word	0x00f42400

08001888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e09d      	b.n	80019d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d108      	bne.n	80018b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018aa:	d009      	beq.n	80018c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
 80018b2:	e005      	b.n	80018c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe fdee 	bl	80004bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001900:	d902      	bls.n	8001908 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e002      	b.n	800190e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001916:	d007      	beq.n	8001928 <HAL_SPI_Init+0xa0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001920:	d002      	beq.n	8001928 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	ea42 0103 	orr.w	r1, r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	0c1b      	lsrs	r3, r3, #16
 8001984:	f003 0204 	and.w	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80019a4:	ea42 0103 	orr.w	r1, r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b088      	sub	sp, #32
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4613      	mov	r3, r2
 80019ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_SPI_Transmit+0x22>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e158      	b.n	8001cb2 <HAL_SPI_Transmit+0x2d4>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a08:	f7fe fef2 	bl	80007f0 <HAL_GetTick>
 8001a0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d002      	beq.n	8001a24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a22:	e13d      	b.n	8001ca0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_SPI_Transmit+0x52>
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a34:	e134      	b.n	8001ca0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	88fa      	ldrh	r2, [r7, #6]
 8001a54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a80:	d10f      	bne.n	8001aa2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aac:	2b40      	cmp	r3, #64	; 0x40
 8001aae:	d007      	beq.n	8001ac0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ac8:	d94b      	bls.n	8001b62 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_SPI_Transmit+0xfa>
 8001ad2:	8afb      	ldrh	r3, [r7, #22]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d13e      	bne.n	8001b56 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001adc:	881a      	ldrh	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	1c9a      	adds	r2, r3, #2
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001afc:	e02b      	b.n	8001b56 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d112      	bne.n	8001b32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	1c9a      	adds	r2, r3, #2
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b30:	e011      	b.n	8001b56 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b32:	f7fe fe5d 	bl	80007f0 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d803      	bhi.n	8001b4a <HAL_SPI_Transmit+0x16c>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b48:	d102      	bne.n	8001b50 <HAL_SPI_Transmit+0x172>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b54:	e0a4      	b.n	8001ca0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ce      	bne.n	8001afe <HAL_SPI_Transmit+0x120>
 8001b60:	e07c      	b.n	8001c5c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_SPI_Transmit+0x192>
 8001b6a:	8afb      	ldrh	r3, [r7, #22]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d170      	bne.n	8001c52 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d912      	bls.n	8001ba0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	1c9a      	adds	r2, r3, #2
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b02      	subs	r3, #2
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b9e:	e058      	b.n	8001c52 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	330c      	adds	r3, #12
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001bc6:	e044      	b.n	8001c52 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d12b      	bne.n	8001c2e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d912      	bls.n	8001c06 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	881a      	ldrh	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	1c9a      	adds	r2, r3, #2
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b02      	subs	r3, #2
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c04:	e025      	b.n	8001c52 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c2c:	e011      	b.n	8001c52 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c2e:	f7fe fddf 	bl	80007f0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d803      	bhi.n	8001c46 <HAL_SPI_Transmit+0x268>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c44:	d102      	bne.n	8001c4c <HAL_SPI_Transmit+0x26e>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c50:	e026      	b.n	8001ca0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1b5      	bne.n	8001bc8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fb5b 	bl	800231c <SPI_EndRxTxTransaction>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
 8001c9c:	e000      	b.n	8001ca0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001c9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b08a      	sub	sp, #40	; 0x28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_SPI_TransmitReceive+0x26>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e1fb      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x41e>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce8:	f7fe fd82 	bl	80007f0 <HAL_GetTick>
 8001cec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001cf4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d04:	7efb      	ldrb	r3, [r7, #27]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d00e      	beq.n	8001d28 <HAL_SPI_TransmitReceive+0x6e>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d10:	d106      	bne.n	8001d20 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_SPI_TransmitReceive+0x66>
 8001d1a:	7efb      	ldrb	r3, [r7, #27]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d003      	beq.n	8001d28 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
 8001d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d26:	e1cd      	b.n	80020c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_SPI_TransmitReceive+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_SPI_TransmitReceive+0x80>
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d40:	e1c0      	b.n	80020c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d003      	beq.n	8001d56 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	887a      	ldrh	r2, [r7, #2]
 8001d66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d98:	d802      	bhi.n	8001da0 <HAL_SPI_TransmitReceive+0xe6>
 8001d9a:	8a3b      	ldrh	r3, [r7, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d908      	bls.n	8001db2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	e007      	b.n	8001dc2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dc0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d007      	beq.n	8001de0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001de8:	d97c      	bls.n	8001ee4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x13e>
 8001df2:	8a7b      	ldrh	r3, [r7, #18]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d169      	bne.n	8001ecc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	1c9a      	adds	r2, r3, #2
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e1c:	e056      	b.n	8001ecc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d11b      	bne.n	8001e64 <HAL_SPI_TransmitReceive+0x1aa>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d016      	beq.n	8001e64 <HAL_SPI_TransmitReceive+0x1aa>
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d113      	bne.n	8001e64 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	1c9a      	adds	r2, r3, #2
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d11c      	bne.n	8001eac <HAL_SPI_TransmitReceive+0x1f2>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d016      	beq.n	8001eac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	1c9a      	adds	r2, r3, #2
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001eac:	f7fe fca0 	bl	80007f0 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d807      	bhi.n	8001ecc <HAL_SPI_TransmitReceive+0x212>
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec2:	d003      	beq.n	8001ecc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001eca:	e0fb      	b.n	80020c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1a3      	bne.n	8001e1e <HAL_SPI_TransmitReceive+0x164>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d19d      	bne.n	8001e1e <HAL_SPI_TransmitReceive+0x164>
 8001ee2:	e0df      	b.n	80020a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_SPI_TransmitReceive+0x23a>
 8001eec:	8a7b      	ldrh	r3, [r7, #18]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	f040 80cb 	bne.w	800208a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d912      	bls.n	8001f24 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	881a      	ldrh	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	1c9a      	adds	r2, r3, #2
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b02      	subs	r3, #2
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f22:	e0b2      	b.n	800208a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f4a:	e09e      	b.n	800208a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d134      	bne.n	8001fc4 <HAL_SPI_TransmitReceive+0x30a>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d02f      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0x30a>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d12c      	bne.n	8001fc4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d912      	bls.n	8001f9a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	1c9a      	adds	r2, r3, #2
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b02      	subs	r3, #2
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f98:	e012      	b.n	8001fc0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d148      	bne.n	8002064 <HAL_SPI_TransmitReceive+0x3aa>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d042      	beq.n	8002064 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d923      	bls.n	8002032 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b02      	subs	r3, #2
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d81f      	bhi.n	8002060 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	e016      	b.n	8002060 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f103 020c 	add.w	r2, r3, #12
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002060:	2301      	movs	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002064:	f7fe fbc4 	bl	80007f0 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002070:	429a      	cmp	r2, r3
 8002072:	d803      	bhi.n	800207c <HAL_SPI_TransmitReceive+0x3c2>
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207a:	d102      	bne.n	8002082 <HAL_SPI_TransmitReceive+0x3c8>
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002088:	e01c      	b.n	80020c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f af5b 	bne.w	8001f4c <HAL_SPI_TransmitReceive+0x292>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f47f af54 	bne.w	8001f4c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f937 	bl	800231c <SPI_EndRxTxTransaction>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
 80020c0:	e000      	b.n	80020c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80020c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80020d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020f0:	f7fe fb7e 	bl	80007f0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002100:	f7fe fb76 	bl	80007f0 <HAL_GetTick>
 8002104:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	015b      	lsls	r3, r3, #5
 800210c:	0d1b      	lsrs	r3, r3, #20
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002116:	e054      	b.n	80021c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800211e:	d050      	beq.n	80021c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002120:	f7fe fb66 	bl	80007f0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	429a      	cmp	r2, r3
 800212e:	d902      	bls.n	8002136 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d13d      	bne.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800214e:	d111      	bne.n	8002174 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002158:	d004      	beq.n	8002164 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d107      	bne.n	8002174 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217c:	d10f      	bne.n	800219e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800219c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e017      	b.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3b01      	subs	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4013      	ands	r3, r2
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d19b      	bne.n	8002118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002202:	f7fe faf5 	bl	80007f0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	4413      	add	r3, r2
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002212:	f7fe faed 	bl	80007f0 <HAL_GetTick>
 8002216:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	330c      	adds	r3, #12
 800221e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00da      	lsls	r2, r3, #3
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	0d1b      	lsrs	r3, r3, #20
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002238:	e060      	b.n	80022fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002240:	d107      	bne.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002250:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002258:	d050      	beq.n	80022fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800225a:	f7fe fac9 	bl	80007f0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	429a      	cmp	r2, r3
 8002268:	d902      	bls.n	8002270 <SPI_WaitFifoStateUntilTimeout+0x80>
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d13d      	bne.n	80022ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800227e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002288:	d111      	bne.n	80022ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002292:	d004      	beq.n	800229e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229c:	d107      	bne.n	80022ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b6:	d10f      	bne.n	80022d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e010      	b.n	800230e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d196      	bne.n	800223a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff ff5b 	bl	80021f0 <SPI_WaitFifoStateUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e027      	b.n	80023a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2200      	movs	r2, #0
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff fec0 	bl	80020e0 <SPI_WaitFlagStateUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	f043 0220 	orr.w	r2, r3, #32
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e014      	b.n	80023a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff ff34 	bl	80021f0 <SPI_WaitFifoStateUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e000      	b.n	80023a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <__libc_init_array>:
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	4d0d      	ldr	r5, [pc, #52]	; (80023e0 <__libc_init_array+0x38>)
 80023ac:	4c0d      	ldr	r4, [pc, #52]	; (80023e4 <__libc_init_array+0x3c>)
 80023ae:	1b64      	subs	r4, r4, r5
 80023b0:	10a4      	asrs	r4, r4, #2
 80023b2:	2600      	movs	r6, #0
 80023b4:	42a6      	cmp	r6, r4
 80023b6:	d109      	bne.n	80023cc <__libc_init_array+0x24>
 80023b8:	4d0b      	ldr	r5, [pc, #44]	; (80023e8 <__libc_init_array+0x40>)
 80023ba:	4c0c      	ldr	r4, [pc, #48]	; (80023ec <__libc_init_array+0x44>)
 80023bc:	f000 f820 	bl	8002400 <_init>
 80023c0:	1b64      	subs	r4, r4, r5
 80023c2:	10a4      	asrs	r4, r4, #2
 80023c4:	2600      	movs	r6, #0
 80023c6:	42a6      	cmp	r6, r4
 80023c8:	d105      	bne.n	80023d6 <__libc_init_array+0x2e>
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d0:	4798      	blx	r3
 80023d2:	3601      	adds	r6, #1
 80023d4:	e7ee      	b.n	80023b4 <__libc_init_array+0xc>
 80023d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023da:	4798      	blx	r3
 80023dc:	3601      	adds	r6, #1
 80023de:	e7f2      	b.n	80023c6 <__libc_init_array+0x1e>
 80023e0:	08002428 	.word	0x08002428
 80023e4:	08002428 	.word	0x08002428
 80023e8:	08002428 	.word	0x08002428
 80023ec:	0800242c 	.word	0x0800242c

080023f0 <memset>:
 80023f0:	4402      	add	r2, r0
 80023f2:	4603      	mov	r3, r0
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d100      	bne.n	80023fa <memset+0xa>
 80023f8:	4770      	bx	lr
 80023fa:	f803 1b01 	strb.w	r1, [r3], #1
 80023fe:	e7f9      	b.n	80023f4 <memset+0x4>

08002400 <_init>:
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	bf00      	nop
 8002404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002406:	bc08      	pop	{r3}
 8002408:	469e      	mov	lr, r3
 800240a:	4770      	bx	lr

0800240c <_fini>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr
